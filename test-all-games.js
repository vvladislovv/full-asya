#!/usr/bin/env node

const API_URL = 'http://localhost:3000/api';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function login(telegramId = '123456789') {
    const response = await fetch(`${API_URL}/auth/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ telegramId })
    });
    
    if (!response.ok) {
        throw new Error(`Login failed: ${response.status}`);
    }
    
    const data = await response.json();
    return data.access_token;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function getTests(token) {
    const response = await fetch(`${API_URL}/tests`, {
        headers: { 'Authorization': `Bearer ${token}` }
    });
    
    if (!response.ok) {
        throw new Error(`Get tests failed: ${response.status}`);
    }
    
    return await response.json();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ç–µ—Å—Ç–∞
async function startTest(token, testId) {
    const response = await fetch(`${API_URL}/tests/start`, {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ testId })
    });
    
    if (!response.ok) {
        throw new Error(`Start test failed: ${response.status}`);
    }
    
    return await response.json();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
async function submitResult(token, resultId, testType, score, maxScore) {
    const payload = {
        resultId,
        answers: {
            correct: score,
            total: maxScore
        },
        timeSpent: Math.floor(Math.random() * 120) + 30,
        maxScore: maxScore
    };
    
    console.log(`   üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: ${JSON.stringify(payload)}`);
    
    const response = await fetch(`${API_URL}/tests/submit`, {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
    });
    
    if (!response.ok) {
        const errorText = await response.text();
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ ${response.status}: ${errorText}`);
        throw new Error(`Submit result failed: ${response.status} - ${errorText}`);
    }
    
    return await response.json();
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testAllGames() {
    try {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö 8 –∏–≥—Ä...\n');
        
        // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        console.log('1Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
        const token = await login();
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞\n');
        
        // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
        console.log('2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤...');
        const testsResponse = await getTests(token);
        const tests = Array.isArray(testsResponse) ? testsResponse : Object.values(testsResponse);
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${tests.length} —Ç–µ—Å—Ç–æ–≤\n`);
        
        // 3. –ü—Ä–æ—Ö–æ–¥–∏–º –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç
        const results = [];
        
        for (let i = 0; i < tests.length; i++) {
            const test = tests[i];
            console.log(`${i + 1}Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${test.name} (${test.type})`);
            
            try {
                // –°—Ç–∞—Ä—Ç—É–µ–º —Ç–µ—Å—Ç
                const testResult = await startTest(token, test.id);
                console.log(`   üìã –¢–µ—Å—Ç –Ω–∞—á–∞—Ç —Å ID: ${testResult.id}`);
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                const maxScore = test.configuration?.questionCount || 10;
                const score = Math.floor(Math.random() * maxScore) + Math.floor(maxScore * 0.3); // 30-100%
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                const submitResult_res = await submitResult(token, testResult.id, test.type, score, maxScore);
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
                if (!submitResult_res || !submitResult_res.id) {
                    throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
                }
                const percentage = Math.round((score / maxScore) * 100);
                
                console.log(`   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${score}/${maxScore} (${percentage}%)`);
                
                results.push({
                    testType: test.type,
                    name: test.name,
                    score: score,
                    maxScore: maxScore,
                    percentage: percentage,
                    resultLevel: submitResult_res.resultLevel
                });
                
            } catch (error) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
                results.push({
                    testType: test.type,
                    name: test.name,
                    error: error.message
                });
            }
            
            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 500));
        }
        
        console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
        console.log('================================');
        
        results.forEach((result, index) => {
            if (result.error) {
                console.log(`${index + 1}. ${result.name}: ‚ùå ${result.error}`);
            } else {
                console.log(`${index + 1}. ${result.name}: ‚úÖ ${result.percentage}% (${result.resultLevel})`);
            }
        });
        
        const successCount = results.filter(r => !r.error).length;
        console.log(`\nüéØ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ: ${successCount} –∏–∑ ${results.length} —Ç–µ—Å—Ç–æ–≤`);
        
        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
        const statsResponse = await fetch(`${API_URL}/history/stats?period=all`, {
            headers: { 'Authorization': `Bearer ${token}` }
        });
        
        if (statsResponse.ok) {
            const stats = await statsResponse.json();
            console.log(`‚úÖ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤ –≤ –ë–î: ${stats.completedTests}`);
            console.log(`‚úÖ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: ${Math.round(stats.averageScore)}%`);
        } else {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
        }
        
        console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫
testAllGames();
