#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook'–∞ Telegram –±–æ—Ç–∞
"""
import os
import sys
import asyncio
import httpx
from app.config import settings

async def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook'–∞ –¥–ª—è Telegram –±–æ—Ç–∞"""
    
    if not settings.TELEGRAM_BOT_TOKEN or settings.TELEGRAM_BOT_TOKEN == "your_telegram_bot_token_here":
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN —Å —Ç–æ–∫–µ–Ω–æ–º –≤–∞—à–µ–≥–æ –±–æ—Ç–∞")
        return False
    
    # URL –¥–ª—è webhook'–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω)
    webhook_url = os.getenv('WEBHOOK_URL', 'https://your-domain.com/api/telegram/webhook')
    
    print(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook'–∞ –¥–ª—è –±–æ—Ç–∞...")
    print(f"üì° Webhook URL: {webhook_url}")
    
    try:
        async with httpx.AsyncClient() as client:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
            response = await client.post(
                f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/setWebhook",
                json={
                    "url": webhook_url,
                    "allowed_updates": ["message", "callback_query"]
                }
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get("ok"):
                    print("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
                    print(f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {result.get('description', 'N/A')}")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook'–∞: {result.get('description')}")
                    return False
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ webhook'–∞: {e}")
        return False

async def get_webhook_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º webhook'–µ"""
    
    if not settings.TELEGRAM_BOT_TOKEN or settings.TELEGRAM_BOT_TOKEN == "your_telegram_bot_token_here":
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return False
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/getWebhookInfo"
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get("ok"):
                    webhook_info = result.get("result", {})
                    print("üì° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook'–µ:")
                    print(f"   URL: {webhook_info.get('url', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
                    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {webhook_info.get('pending_update_count', 0)}")
                    print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {webhook_info.get('last_error_message', '–ù–µ—Ç')}")
                    print(f"   –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—à–∏–±–∫–∏: {webhook_info.get('last_error_date', '–ù–µ—Ç')}")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {result.get('description')}")
                    return False
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        return False

async def delete_webhook():
    """–£–¥–∞–ª–µ–Ω–∏–µ webhook'–∞"""
    
    if not settings.TELEGRAM_BOT_TOKEN or settings.TELEGRAM_BOT_TOKEN == "your_telegram_bot_token_here":
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return False
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/deleteWebhook"
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get("ok"):
                    print("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook'–∞: {result.get('description')}")
                    return False
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook'–∞: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python setup-webhook.py setup    - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å webhook")
        print("  python setup-webhook.py info     - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook'–µ")
        print("  python setup-webhook.py delete   - –£–¥–∞–ª–∏—Ç—å webhook")
        return
    
    command = sys.argv[1].lower()
    
    if command == "setup":
        await setup_webhook()
    elif command == "info":
        await get_webhook_info()
    elif command == "delete":
        await delete_webhook()
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")

if __name__ == "__main__":
    asyncio.run(main())
