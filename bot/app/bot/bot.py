"""
AsyaBot Telegram Bot Implementation
"""
import asyncio
import signal
from datetime import datetime
from typing import Dict, Any
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo

from app.config import settings
from app.logger import get_logger
from app.database import get_db, init_db
from app.models.questionnaire import Questionnaire, QuestionnaireResponse
from app.services.nestjs_service import NestJSService
from app.data.questionnaire_data import (
    get_questions, get_answers, get_total_questions, 
    get_risk_interpretation, is_reverse_question, get_answer_weight
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = get_logger("bot")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class QuestionnaireStates(StatesGroup):
    choosing_language = State()
    filling_questionnaire = State()
    completed = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
if not settings.TELEGRAM_BOT_TOKEN or settings.TELEGRAM_BOT_TOKEN == "your_telegram_bot_token_here":
    logger.warning("TELEGRAM_BOT_TOKEN is not configured. Bot functionality will be disabled; API will run.")
    bot = None
    dp = None
else:
    bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)

# –§–ª–∞–≥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
shutdown_event = asyncio.Event()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ dp –¥–æ—Å—Ç—É–ø–µ–Ω
def register_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞"""
    if dp is None:
        # Bot disabled; skip registration silently
        return
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–¥–µ—Å—å
    @dp.message(F.text == "/start")
    async def cmd_start(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        logger.info(f"User {message.from_user.id} started bot")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AsyaBot!\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:"
        )
        
        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        keyboard = [
            [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
            [InlineKeyboardButton(text="üá∫üá∏ English", callback_data="lang_en")]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await message.answer(welcome_text, reply_markup=reply_markup)
        await state.set_state(QuestionnaireStates.choosing_language)

    @dp.callback_query(F.data.startswith('lang_'))
    async def language_selected(callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
        language = callback.data.split('_')[1]
        logger.info(f"User {callback.from_user.id} selected language: {language}")
        
        await callback.answer()
        await state.update_data(language=language)
        
        # –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∫–µ—Ç—É
        await start_questionnaire(callback, state)

    async def start_questionnaire(callback: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã"""
        data = await state.get_data()
        language = data.get("language", "ru")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã
        await state.update_data(responses={}, current_question=1)
        await state.set_state(QuestionnaireStates.filling_questionnaire)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await show_question(callback, state)

    async def show_question(callback: types.CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑ –≤–æ–ø—Ä–æ—Å–∞ –∞–Ω–∫–µ—Ç—ã"""
        data = await state.get_data()
        language = data.get("language", "ru")
        current_question = data.get("current_question", 1)
        
        questions = get_questions(language)
        answers = get_answers(language)
        
        if current_question > len(questions):
            # –ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            await complete_questionnaire(callback, state)
            return
        
        question_text = questions[current_question]
        # answers —É–∂–µ —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —è–∑—ã–∫–∞ ‚Üí –Ω–µ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –≤–æ–ø—Ä–æ—Å–∞
        answer_options = answers
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        keyboard = []
        for answer in answer_options:
            keyboard.append([InlineKeyboardButton(
                text=answer,
                callback_data=f"answer_{current_question}_{answer}"
            )])
        
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(
            f"–í–æ–ø—Ä–æ—Å {current_question} –∏–∑ {len(questions)}:\n\n{question_text}",
            reply_markup=reply_markup
        )

    @dp.callback_query(F.data.startswith('answer_'))
    async def handle_answer(callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        parts = callback.data.split('_')
        question_num = int(parts[1])
        answer = '_'.join(parts[2:])  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
        
        logger.info(f"User {callback.from_user.id} answered question {question_num}: {answer}")
        
        await callback.answer()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        data = await state.get_data()
        responses = data.get("responses", {})
        responses[str(question_num)] = answer
        await state.update_data(responses=responses, current_question=question_num + 1)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        await show_question(callback, state)

    async def complete_questionnaire(callback: types.CallbackQuery, state: FSMContext):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∏ –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        data = await state.get_data()
        language = data.get("language", "ru")
        responses = data.get("responses", {})
        
        logger.info(f"User {callback.from_user.id} completed questionnaire with {len(responses)} responses")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∏—Å–∫
        risk_result = calculate_risk_locally(responses, language)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ NestJS –±—ç–∫–µ–Ω–¥
            questionnaire_data = {
                "telegram_id": callback.from_user.id,
                "first_name": callback.from_user.first_name,
                "last_name": callback.from_user.last_name,
                "answers": responses
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
            success = await nestjs_service.send_questionnaire_data(questionnaire_data)
            if success:
                logger.info(f"Questionnaire data sent to NestJS backend for user {callback.from_user.id}")
            else:
                logger.warning(f"Failed to send questionnaire data to NestJS backend for user {callback.from_user.id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            result_data = {
                "telegram_id": callback.from_user.id,
                "risk_level": risk_result['risk_level'],
                "score": risk_result['score'],
                "recommendations": risk_result['recommendations']
            }
            
            success = await nestjs_service.send_questionnaire_result(result_data)
            if success:
                logger.info(f"Questionnaire result sent to NestJS backend for user {callback.from_user.id}")
            else:
                logger.warning(f"Failed to send questionnaire result to NestJS backend for user {callback.from_user.id}")
            
        except Exception as e:
            logger.error(f"Error sending data to NestJS backend: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        risk_level_text = {
            "low": "–ù–∏–∑–∫–∏–π" if language == "ru" else "Low",
            "medium": "–°—Ä–µ–¥–Ω–∏–π" if language == "ru" else "Medium", 
            "high": "–í—ã—Å–æ–∫–∏–π" if language == "ru" else "High"
        }.get(risk_result['risk_level'], "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        if language == "ru":
            result_text = f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∫–µ—Ç—ã\n\n"
            result_text += f"–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_level_text}\n"
            result_text += f"–ë–∞–ª–ª: {risk_result['score']}/100\n\n"
            result_text += "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            for rec in risk_result['recommendations']:
                result_text += f"‚Ä¢ {rec}\n"
        else:
            result_text = f"üìä Questionnaire Results\n\n"
            result_text += f"Risk Level: {risk_level_text}\n"
            result_text += f"Score: {risk_result['score']}/100\n\n"
            result_text += "Recommendations:\n"
            for rec in risk_result['recommendations']:
                result_text += f"‚Ä¢ {rec}\n"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [InlineKeyboardButton(
                text="üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç" if language == "ru" else "üìä Detailed Report",
                callback_data="detailed_report"
            )],
            [InlineKeyboardButton(
                text="üìö –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã" if language == "ru" else "üìö Useful Materials",
                callback_data="useful_materials"
            )],
            [InlineKeyboardButton(
                text="üë®‚Äç‚öïÔ∏è –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è" if language == "ru" else "üë®‚Äç‚öïÔ∏è Consultation",
                callback_data="consultation"
            )],
            [InlineKeyboardButton(
                text="üîÑ –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ" if language == "ru" else "üîÑ Restart",
                callback_data="restart"
            )]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(result_text, reply_markup=reply_markup)
        await state.set_state(QuestionnaireStates.completed)

    @dp.callback_query(F.data == "consultation")
    async def handle_consultation(callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        data = await state.get_data()
        language = data.get("language", "ru")
        
        consultation_text = (
            "üë®‚Äç‚öïÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:\n\n"
            "üìû –ü–æ–∑–≤–æ–Ω–∏—Ç–µ: +7 (XXX) XXX-XX-XX\n"
            "üìß Email: consultation@example.com\n"
            "üåê –í–µ–±-—Å–∞–π—Ç: www.example.com\n\n"
            "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç 9:00-18:00"
        ) if language == "ru" else (
            "üë®‚Äç‚öïÔ∏è To get specialist consultation:\n\n"
            "üìû Call: +1 (XXX) XXX-XXXX\n"
            "üìß Email: consultation@example.com\n"
            "üåê Website: www.example.com\n\n"
            "Working hours: Mon-Fri 9:00-18:00"
        )
        
        keyboard = [[InlineKeyboardButton(
            text="‚Üê –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º" if language == "ru" else "‚Üê Back to results",
            callback_data="back_to_results"
        )]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(consultation_text, reply_markup=reply_markup)

    @dp.callback_query(F.data == "restart")
    async def restart_questionnaire(callback: types.CallbackQuery, state: FSMContext):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç—ã"""
        await callback.answer()
        await state.clear()
        await cmd_start(callback.message, state)

    @dp.message(F.text == "/cancel")
    async def cancel_questionnaire(message: types.Message, state: FSMContext):
        """–û—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã"""
        await state.clear()
        await message.answer("–ê–Ω–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")

    @dp.errors()
    async def error_handler(update: types.Update, exception: Exception):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞"""
        logger.error(f"Bot error: {exception}")
        logger.error(f"Update: {update}")

    @dp.callback_query(F.data == "detailed_report")
    async def handle_detailed_report(callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        logger.info(f"User {callback.from_user.id} requested detailed report")
        await callback.answer()
        
        data = await state.get_data()
        language = data.get("language", "ru")
        responses = data.get("responses", {})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
        report = "üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∫–µ—Ç–µ\n\n" if language == "ru" else "üìä Detailed questionnaire report\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
        total_questions = len(responses)
        yes_count = sum(1 for answer in responses.values() if answer in ["–î–∞", "Yes"])
        no_count = sum(1 for answer in responses.values() if answer in ["–ù–µ—Ç", "No"])
        sometimes_count = sum(1 for answer in responses.values() if answer in ["–ò–Ω–æ–≥–¥–∞", "Sometimes"])
        difficult_count = sum(1 for answer in responses.values() if answer in ["–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å", "Difficult to answer"])
        
        report += f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}\n" if language == "ru" else f"Total questions: {total_questions}\n"
        report += f"–û—Ç–≤–µ—Ç–æ–≤ '–î–∞': {yes_count}\n" if language == "ru" else f"'Yes' answers: {yes_count}\n"
        report += f"–û—Ç–≤–µ—Ç–æ–≤ '–ù–µ—Ç': {no_count}\n" if language == "ru" else f"'No' answers: {no_count}\n"
        report += f"–û—Ç–≤–µ—Ç–æ–≤ '–ò–Ω–æ–≥–¥–∞': {sometimes_count}\n" if language == "ru" else f"'Sometimes' answers: {sometimes_count}\n"
        report += f"–ó–∞—Ç—Ä—É–¥–Ω–∏–ª–∏—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å: {difficult_count}\n\n" if language == "ru" else f"Difficult to answer: {difficult_count}\n\n"
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = [[InlineKeyboardButton(
            text="‚Üê –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º" if language == "ru" else "‚Üê Back to results",
            callback_data="back_to_results"
        )]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(report, reply_markup=reply_markup)

    @dp.callback_query(F.data == "useful_materials")
    async def handle_useful_materials(callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–µ–∑–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        logger.info(f"User {callback.from_user.id} requested useful materials")
        await callback.answer()
        
        data = await state.get_data()
        language = data.get("language", "ru")
        
        materials = "üìö –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n\n" if language == "ru" else "üìö Useful materials\n\n"
        
        if language == "ru":
            materials += "üîó –°—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:\n\n"
            materials += "‚Ä¢ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è –ø–æ –±–æ—Ä—å–±–µ —Å –±–æ–ª–µ–∑–Ω—å—é –ê–ª—å—Ü–≥–µ–π–º–µ—Ä–∞\n"
            materials += "‚Ä¢ –¶–µ–Ω—Ç—Ä –Ω–µ–≤—Ä–æ–ª–æ–≥–∏–∏ –∏ –ø—Å–∏—Ö–∏–∞—Ç—Ä–∏–∏\n"
            materials += "‚Ä¢ –ü–∞–º—è—Ç–∫–∞ –ø–æ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–µ –¥–µ–º–µ–Ω—Ü–∏–∏\n"
            materials += "‚Ä¢ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–∞–º—è—Ç–∏\n\n"
            materials += "üìû –ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è: 8-800-XXX-XX-XX"
        else:
            materials += "üîó Useful resource links:\n\n"
            materials += "‚Ä¢ Alzheimer's Association\n"
            materials += "‚Ä¢ National Institute on Aging\n"
            materials += "‚Ä¢ Memory training exercises\n"
            materials += "‚Ä¢ Prevention guidelines\n\n"
            materials += "üìû Hotline: 1-800-XXX-XXXX"
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = [[InlineKeyboardButton(
            text="‚Üê –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º" if language == "ru" else "‚Üê Back to results",
            callback_data="back_to_results"
        )]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(materials, reply_markup=reply_markup)

    @dp.callback_query(F.data == "back_to_results")
    async def back_to_results(callback: types.CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º"""
        logger.info(f"User {callback.from_user.id} returned to results")
        await callback.answer()
        
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await complete_questionnaire(callback, state)

    @dp.callback_query(F.data == "main_menu")
    async def main_menu(callback: types.CallbackQuery, state: FSMContext):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        logger.info(f"User {callback.from_user.id} accessed main menu")
        await callback.answer()
        await state.clear()
        await cmd_start(callback.message, state)

    @dp.callback_query(F.data == "previous_results")
    async def previous_results(callback: types.CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        logger.info(f"User {callback.from_user.id} requested previous results")
        await callback.answer()
        
        data = await state.get_data()
        language = data.get("language", "ru")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –ë–î
        no_results_text = (
            "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.\n"
            "–ü—Ä–æ–π–¥–∏—Ç–µ –∞–Ω–∫–µ—Ç—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–¥–µ—Å—å."
        ) if language == "ru" else (
            "üìä You don't have any saved results yet.\n"
            "Complete the questionnaire to see results here."
        )
        
        keyboard = [[InlineKeyboardButton(
            text="‚Üê –ù–∞–∑–∞–¥" if language == "ru" else "‚Üê Back",
            callback_data="main_menu"
        )]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(no_results_text, reply_markup=reply_markup)

    @dp.callback_query(F.data == "contact_us")
    async def contact_us(callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        logger.info(f"User {callback.from_user.id} requested contact information")
        await callback.answer()
        
        data = await state.get_data()
        language = data.get("language", "ru")
        
        contact_text = (
            "üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
            "–¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\n"
            "Email: info@asyabot.com\n"
            "–í–µ–±-—Å–∞–π—Ç: www.asyabot.com\n\n"
            "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç 9:00-18:00"
        ) if language == "ru" else (
            "üìû Contact Information\n\n"
            "Phone: +1 (XXX) XXX-XXXX\n"
            "Email: info@asyabot.com\n"
            "Website: www.asyabot.com\n\n"
            "Working hours: Mon-Fri 9:00-18:00"
        )
        
        keyboard = [[InlineKeyboardButton(
            text="‚Üê –ù–∞–∑–∞–¥" if language == "ru" else "‚Üê Back",
            callback_data="main_menu"
        )]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(contact_text, reply_markup=reply_markup)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NestJS —Å–µ—Ä–≤–∏—Å–∞
nestjs_service = NestJSService()

def calculate_risk_locally(responses: dict, language: str) -> dict:
    """–õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤"""
    logger.info("Calculating risk locally from responses")
    logger.debug(f"Responses: {responses}")
    
    try:
        score = 0
        total_questions = len(responses)
        
        for question_num, answer in responses.items():
            if isinstance(answer, str):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω—ã–º
                if is_reverse_question(int(question_num)):
                    # –î–ª—è –æ–±—Ä–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É
                    if answer in ["–î–∞", "Yes"]:
                        score += 0  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫
                    elif answer in ["–ù–µ—Ç", "No"]:
                        score += 3  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∏—Å–∫
                    elif answer in ["–ò–Ω–æ–≥–¥–∞", "Sometimes"]:
                        score += 2
                    elif answer in ["–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å", "Difficult to answer"]:
                        score += 1
                else:
                    # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
                    score += get_answer_weight(answer)
                
                # –î–ª—è –æ–±—Ä–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–µ—Å
                if is_reverse_question(int(question_num)):
                    if answer in ["–î–∞", "Yes"]:
                        actual_weight = 0
                    elif answer in ["–ù–µ—Ç", "No"]:
                        actual_weight = 3
                    elif answer in ["–ò–Ω–æ–≥–¥–∞", "Sometimes"]:
                        actual_weight = 2
                    elif answer in ["–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å", "Difficult to answer"]:
                        actual_weight = 1
                    else:
                        actual_weight = get_answer_weight(answer)
                    logger.debug(f"Question {question_num} (reverse): {answer} = {actual_weight} points")
                else:
                    logger.debug(f"Question {question_num}: {answer} = {get_answer_weight(answer)} points")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫ 100-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ
        max_possible_score = total_questions * 3
        normalized_score = min(100, int((score / max_possible_score) * 100))
        
        logger.info(f"Raw score: {score}, max possible: {max_possible_score}, normalized: {normalized_score}")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
        if normalized_score <= 30:
            risk_level = "low"
            recommendations = [
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–µ—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏",
                "–†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–º–æ—Ç—Ä—ã",
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
            ] if language == "ru" else [
                "Continue to lead a healthy lifestyle",
                "Regular preventive examinations",
                "Maintain social activity"
            ]
            should_consult = False
            logger.info(f"Risk level: LOW (score: {normalized_score})")
        elif normalized_score <= 60:
            risk_level = "medium"
            recommendations = [
                "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞",
                "–£–≤–µ–ª–∏—á—å—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                "–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ –ø–∞–º—è—Ç—å –∏ –≤–Ω–∏–º–∞–Ω–∏–µ"
            ] if language == "ru" else [
                "Specialist consultation is recommended",
                "Increase physical activity",
                "Train memory and attention"
            ]
            should_consult = True
            logger.info(f"Risk level: MEDIUM (score: {normalized_score})")
        else:
            risk_level = "high"
            recommendations = [
                "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ–≤—Ä–æ–ª–æ–≥–∞",
                "–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤",
                "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"
            ] if language == "ru" else [
                "Mandatory consultation with a neurologist",
                "Cognitive testing",
                "Medical examination"
            ]
            should_consult = True
            logger.info(f"Risk level: HIGH (score: {normalized_score})")
        
        logger.info(f"Calculated risk score: {normalized_score}, level: {risk_level}")
        
        return {
            "score": normalized_score,
            "risk_level": risk_level,
            "recommendations": recommendations,
            "should_consult": should_consult
        }
        
    except Exception as e:
        logger.error(f"Error calculating risk locally: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
            "risk_score": 50,
            "risk_level": "medium",
            "recommendations": ["–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"] if language == "ru" else ["Specialist consultation is recommended"],
            "should_consult": True
        }

async def shutdown_bot():
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–æ—Ç–∞"""
    logger.info("Shutting down bot...")
    try:
        if bot:
            await bot.session.close()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º NestJS —Å–µ—Ä–≤–∏—Å
        await nestjs_service.close()
        
        logger.info("Bot shutdown completed")
    except Exception as e:
        logger.error(f"Error during bot shutdown: {e}")

async def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("Starting bot...")
    
    if bot is None or dp is None:
        logger.info("Bot start skipped: TELEGRAM_BOT_TOKEN is not configured")
        return
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        # –í aiogram v3 —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–∑—ã–≤–∞—Ç—å start_polling –Ω–∞ Dispatcher
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Bot failed to start: {e}")
    finally:
        await shutdown_bot()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–∑ main.lifespan()
