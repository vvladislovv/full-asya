#!/usr/bin/env ts-node

import { execSync } from 'child_process';
import * as fs from 'fs';
import * as path from 'path';

interface CheckResult {
  name: string;
  status: 'PASS' | 'FAIL' | 'WARNING';
  message: string;
  details?: string;
  fix?: string;
}

class SystemChecker {
  private results: CheckResult[] = [];

  async runAllChecks(): Promise<void> {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã DrAsya Backend API\n');

    this.checkNodeVersion();
    this.checkPackageJson();
    this.checkEnvironmentFile();
    this.checkDependencies();
    this.checkTypeScriptConfig();
    this.checkDatabaseConfig();
    this.checkRedisConfig();
    this.checkSecurityConfig();
    this.checkDockerConfig();
    this.checkScripts();

    this.printResults();
  }

  private checkNodeVersion(): void {
    try {
      const nodeVersion = execSync('node --version', { encoding: 'utf8' }).trim();
      const version = parseInt(nodeVersion.replace('v', '').split('.')[0]);
      
      if (version >= 18) {
        this.addResult('Node.js Version', 'PASS', `Node.js ${nodeVersion} ‚úÖ`);
      } else {
        this.addResult('Node.js Version', 'FAIL', 
          `Node.js ${nodeVersion} - —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä—Å–∏—è 18+`,
          undefined,
          '–û–±–Ω–æ–≤–∏—Ç–µ Node.js –¥–æ –≤–µ—Ä—Å–∏–∏ 18 –∏–ª–∏ –≤—ã—à–µ: https://nodejs.org/'
        );
      }
    } catch (error) {
      this.addResult('Node.js Version', 'FAIL', 'Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 
        error.message, '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js: https://nodejs.org/');
    }
  }

  private checkPackageJson(): void {
    const packagePath = path.join(process.cwd(), 'package.json');
    
    if (!fs.existsSync(packagePath)) {
      this.addResult('Package.json', 'FAIL', '–§–∞–π–ª package.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    try {
      const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
      
      const requiredDeps = [
        '@nestjs/common', '@nestjs/core', '@nestjs/platform-express',
        '@nestjs/config', '@nestjs/typeorm', '@nestjs/swagger',
        '@nestjs/cache-manager', '@nestjs/throttler',
        'typeorm', 'pg', 'ioredis', 'cache-manager',
        'class-validator', 'class-transformer'
      ];

      const missingDeps = requiredDeps.filter(dep => !packageJson.dependencies[dep]);
      
      if (missingDeps.length === 0) {
        this.addResult('Dependencies', 'PASS', '–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
      } else {
        this.addResult('Dependencies', 'FAIL', 
          `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missingDeps.join(', ')}`,
          undefined,
          '–ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm install'
        );
      }
    } catch (error) {
      this.addResult('Package.json', 'FAIL', '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json', error.message);
    }
  }

  private checkEnvironmentFile(): void {
    const envPath = path.join(process.cwd(), '.env');
    const envExamplePath = path.join(process.cwd(), 'env.example');
    
    if (!fs.existsSync(envExamplePath)) {
      this.addResult('Environment Example', 'WARNING', '–§–∞–π–ª env.example –Ω–µ –Ω–∞–π–¥–µ–Ω');
    } else {
      this.addResult('Environment Example', 'PASS', '–§–∞–π–ª env.example —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    if (!fs.existsSync(envPath)) {
      this.addResult('Environment Config', 'WARNING', 
        '–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω', 
        undefined,
        '–°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.example –≤ .env –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'
      );
      return;
    }

    try {
      const envContent = fs.readFileSync(envPath, 'utf8');
      const requiredVars = [
        'DB_HOST', 'DB_PORT', 'DB_USERNAME', 'DB_PASSWORD', 'DB_DATABASE',
        'JWT_SECRET', 'REDIS_HOST', 'REDIS_PORT'
      ];

      const missingVars = requiredVars.filter(varName => !envContent.includes(varName));
      
      if (missingVars.length === 0) {
        this.addResult('Environment Config', 'PASS', '–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
      } else {
        this.addResult('Environment Config', 'WARNING', 
          `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${missingVars.join(', ')}`,
          undefined,
          '–î–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env —Ñ–∞–π–ª'
        );
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ JWT_SECRET
      if (envContent.includes('JWT_SECRET=your-super-secret-jwt-key')) {
        this.addResult('JWT Security', 'FAIL', 
          'JWT_SECRET –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!',
          undefined,
          '–ò–∑–º–µ–Ω–∏—Ç–µ JWT_SECRET –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª—é—á'
        );
      } else {
        this.addResult('JWT Security', 'PASS', 'JWT_SECRET –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      }
    } catch (error) {
      this.addResult('Environment Config', 'FAIL', '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env —Ñ–∞–π–ª–∞', error.message);
    }
  }

  private checkDependencies(): void {
    const nodeModulesPath = path.join(process.cwd(), 'node_modules');
    
    if (!fs.existsSync(nodeModulesPath)) {
      this.addResult('Node Modules', 'FAIL', 
        '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã',
        undefined,
        '–ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm install'
      );
      return;
    }

    try {
      execSync('npm list --depth=0', { encoding: 'utf8', stdio: 'pipe' });
      this.addResult('Node Modules', 'PASS', '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } catch (error) {
      this.addResult('Node Modules', 'WARNING', 
        '–í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏',
        error.message,
        '–ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm install'
      );
    }
  }

  private checkTypeScriptConfig(): void {
    const tsconfigPath = path.join(process.cwd(), 'tsconfig.json');
    
    if (!fs.existsSync(tsconfigPath)) {
      this.addResult('TypeScript Config', 'FAIL', 'tsconfig.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    try {
      const tsconfig = JSON.parse(fs.readFileSync(tsconfigPath, 'utf8'));
      
      if (tsconfig.compilerOptions && tsconfig.compilerOptions.experimentalDecorators) {
        this.addResult('TypeScript Config', 'PASS', 'TypeScript –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      } else {
        this.addResult('TypeScript Config', 'WARNING', '–í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π TypeScript');
      }
    } catch (error) {
      this.addResult('TypeScript Config', 'FAIL', '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è tsconfig.json', error.message);
    }
  }

  private checkDatabaseConfig(): void {
    const configPath = path.join(process.cwd(), 'src', 'config', 'database.config.ts');
    
    if (fs.existsSync(configPath)) {
      this.addResult('Database Config', 'PASS', '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞');
    } else {
      this.addResult('Database Config', 'FAIL', '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–Ω–æ—Å—Ç–µ–π
    const entitiesPath = path.join(process.cwd(), 'src', 'entities');
    if (fs.existsSync(entitiesPath)) {
      const entities = fs.readdirSync(entitiesPath).filter(file => file.endsWith('.entity.ts'));
      this.addResult('Database Entities', 'PASS', `–ù–∞–π–¥–µ–Ω–æ ${entities.length} —Å—É—â–Ω–æ—Å—Ç–µ–π`);
    } else {
      this.addResult('Database Entities', 'FAIL', '–ü–∞–ø–∫–∞ entities –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
  }

  private checkRedisConfig(): void {
    const redisConfigPath = path.join(process.cwd(), 'src', 'config', 'redis.config.ts');
    
    if (fs.existsSync(redisConfigPath)) {
      this.addResult('Redis Config', 'PASS', '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Redis –Ω–∞–π–¥–µ–Ω–∞');
    } else {
      this.addResult('Redis Config', 'FAIL', '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Redis –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
  }

  private checkSecurityConfig(): void {
    const filterPath = path.join(process.cwd(), 'src', 'common', 'filters', 'http-exception.filter.ts');
    const guardPath = path.join(process.cwd(), 'src', 'common', 'guards', 'throttle.guard.ts');
    const middlewarePath = path.join(process.cwd(), 'src', 'common', 'middleware', 'security.middleware.ts');
    
    const securityComponents = [
      { path: filterPath, name: 'Exception Filter' },
      { path: guardPath, name: 'Throttle Guard' },
      { path: middlewarePath, name: 'Security Middleware' }
    ];

    const existing = securityComponents.filter(comp => fs.existsSync(comp.path));
    
    if (existing.length === securityComponents.length) {
      this.addResult('Security Components', 'PASS', '–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã');
    } else {
      const missing = securityComponents.filter(comp => !fs.existsSync(comp.path));
      this.addResult('Security Components', 'WARNING', 
        `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${missing.map(m => m.name).join(', ')}`
      );
    }
  }

  private checkDockerConfig(): void {
    const dockerfilePath = path.join(process.cwd(), 'Dockerfile');
    const dockerComposePath = path.join(process.cwd(), 'docker-compose.yml');
    
    if (fs.existsSync(dockerfilePath)) {
      this.addResult('Docker', 'PASS', 'Dockerfile –Ω–∞–π–¥–µ–Ω');
    } else {
      this.addResult('Docker', 'WARNING', 'Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (fs.existsSync(dockerComposePath)) {
      this.addResult('Docker Compose', 'PASS', 'docker-compose.yml –Ω–∞–π–¥–µ–Ω');
    } else {
      this.addResult('Docker Compose', 'WARNING', 'docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  }

  private checkScripts(): void {
    const scriptsPath = path.join(process.cwd(), 'scripts');
    
    if (fs.existsSync(scriptsPath)) {
      const scripts = fs.readdirSync(scriptsPath).filter(file => file.endsWith('.ts'));
      this.addResult('Scripts', 'PASS', `–ù–∞–π–¥–µ–Ω–æ ${scripts.length} —Å–∫—Ä–∏–ø—Ç–æ–≤`);
    } else {
      this.addResult('Scripts', 'WARNING', '–ü–∞–ø–∫–∞ scripts –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∂–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
    const importantScripts = ['seed.ts', 'test-security.ts'];
    const existingScripts = importantScripts.filter(script => 
      fs.existsSync(path.join(scriptsPath, script))
    );

    if (existingScripts.length === importantScripts.length) {
      this.addResult('Important Scripts', 'PASS', '–í—Å–µ –≤–∞–∂–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞–π–¥–µ–Ω—ã');
    } else {
      const missing = importantScripts.filter(script => !existingScripts.includes(script));
      this.addResult('Important Scripts', 'WARNING', 
        `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–∫—Ä–∏–ø—Ç—ã: ${missing.join(', ')}`
      );
    }
  }

  private addResult(name: string, status: 'PASS' | 'FAIL' | 'WARNING', message: string, details?: string, fix?: string): void {
    this.results.push({ name, status, message, details, fix });
  }

  private printResults(): void {
    console.log('\n' + '='.repeat(60));
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò –°–ò–°–¢–ï–ú–´');
    console.log('='.repeat(60));

    const passed = this.results.filter(r => r.status === 'PASS').length;
    const failed = this.results.filter(r => r.status === 'FAIL').length;
    const warnings = this.results.filter(r => r.status === 'WARNING').length;

    this.results.forEach(result => {
      const emoji = result.status === 'PASS' ? '‚úÖ' : result.status === 'FAIL' ? '‚ùå' : '‚ö†Ô∏è';
      console.log(`${emoji} ${result.name}: ${result.message}`);
      
      if (result.details) {
        console.log(`   üìù –î–µ—Ç–∞–ª–∏: ${result.details}`);
      }
      
      if (result.fix) {
        console.log(`   üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${result.fix}`);
      }
    });

    console.log('\n' + '-'.repeat(60));
    console.log(`üìà –ò–¢–û–ì–û: ${passed} –ø—Ä–æ—à–ª–æ, ${failed} –ø—Ä–æ–≤–∞–ª–µ–Ω–æ, ${warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π`);
    
    if (failed > 0) {
      console.log('\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–´!');
      console.log('–ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.');
      process.exit(1);
    } else if (warnings > 0) {
      console.log('\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –ü–†–û–ë–õ–ï–ú–´');
      console.log('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã.');
    } else {
      console.log('\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
      console.log('–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É.');
    }

    console.log('\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
    console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∏ Redis –∑–∞–ø—É—â–µ–Ω—ã');
    console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run seed (–¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö)');
    console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run start:dev (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)');
    console.log('4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run test:security (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)');
    console.log('5. –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:3000/api/docs (–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API)');
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
async function main() {
  const checker = new SystemChecker();
  await checker.runAllChecks();
}

if (require.main === module) {
  main().catch(console.error);
}

export { SystemChecker };
