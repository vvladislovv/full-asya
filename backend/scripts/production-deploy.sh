#!/bin/bash

# üöÄ Production Deploy Script –¥–ª—è DrAsya Backend
echo "üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–µ–ø–ª–æ—é DrAsya Backend –≤ –ø—Ä–æ–¥–∞–∫—à–Ω..."
echo "=================================================="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [ "$NODE_ENV" != "production" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: NODE_ENV –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 'production'"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
required_vars=("DATABASE_URL" "JWT_SECRET" "REDIS_HOST")
for var in "${required_vars[@]}"; do
    if [ -z "${!var}" ]; then
        echo "‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è $var –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        exit 1
    fi
done

echo "‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"

# –°–æ–∑–¥–∞–Ω–∏–µ production .env
echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
cat > .env.production << EOF
NODE_ENV=production
PORT=3000
DATABASE_URL=${DATABASE_URL}
JWT_SECRET=${JWT_SECRET}
JWT_EXPIRES_IN=7d
REDIS_HOST=${REDIS_HOST}
REDIS_PORT=${REDIS_PORT:-6379}
REDIS_PASSWORD=${REDIS_PASSWORD:-}
LOG_LEVEL=info
CACHE_TTL=300
THROTTLE_TTL=60
THROTTLE_LIMIT=50
MAX_REQUEST_SIZE=10mb
ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-*}
EOF

echo "‚úÖ Production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ production –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
npm ci --only=production --silent

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma Client
echo "üóÑÔ∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma Client..."
npx prisma generate

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
if npx prisma db seed --preview-feature 2>/dev/null; then
    echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞"
else
    echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
    exit 1
fi

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
echo "üìä –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
npx prisma migrate deploy

# –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
echo "üî® –°–±–æ—Ä–∫–∞ production –≤–µ—Ä—Å–∏–∏..."
npm run build

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏
if [ ! -d "dist" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è dist –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
    exit 1
fi

echo "‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"

# –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞ (–¥–ª—è Linux)
if command -v systemctl &> /dev/null; then
    echo "‚öôÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞..."
    cat > /tmp/asya-backend.service << EOF
[Unit]
Description=DrAsya Backend API
After=network.target

[Service]
Type=simple
User=www-data
WorkingDirectory=$(pwd)
Environment=NODE_ENV=production
EnvironmentFile=$(pwd)/.env.production
ExecStart=/usr/bin/node dist/main
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF
    
    if [ "$EUID" -eq 0 ]; then
        mv /tmp/asya-backend.service /etc/systemd/system/
        systemctl daemon-reload
        echo "‚úÖ Systemd —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω"
    else
        echo "‚ÑπÔ∏è  Systemd —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω –≤ /tmp/asya-backend.service"
        echo "‚ÑπÔ∏è  –í—ã–ø–æ–ª–Ω–∏—Ç–µ: sudo mv /tmp/asya-backend.service /etc/systemd/system/ && sudo systemctl daemon-reload"
    fi
fi

# –°–æ–∑–¥–∞–Ω–∏–µ Docker Compose –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞
echo "üê≥ –°–æ–∑–¥–∞–Ω–∏–µ production Docker Compose..."
cat > docker-compose.production.yml << EOF
version: '3.8'

services:
  app:
    build: .
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    env_file:
      - .env.production
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  postgres:
    image: postgres:13-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: \${DB_DATABASE}
      POSTGRES_USER: \${DB_USERNAME}
      POSTGRES_PASSWORD: \${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass \${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app

volumes:
  postgres_data:
  redis_data:
EOF

echo "‚úÖ Production Docker Compose —Å–æ–∑–¥–∞–Ω"

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx
echo "üåê –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx..."
cat > nginx.conf << EOF
events {
    worker_connections 1024;
}

http {
    upstream backend {
        server app:3000;
    }

    server {
        listen 80;
        server_name localhost;

        location / {
            proxy_pass http://backend;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
        }

        location /health {
            proxy_pass http://backend/health;
            access_log off;
        }
    }
}
EOF

echo "‚úÖ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
echo "üõ°Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."
if npm run test:security > /dev/null 2>&1; then
    echo "‚úÖ –¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã"
else
    echo "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–æ—à–ª–∏"
fi

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
echo "üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏..."

checks=(
    "dist:–°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    ".env.production:Production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
    "docker-compose.production.yml:Docker Compose"
    "nginx.conf:Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
)

for check in "${checks[@]}"; do
    file=$(echo "$check" | cut -d: -f1)
    desc=$(echo "$check" | cut -d: -f2)
    
    if [ -e "$file" ]; then
        echo "‚úÖ $desc"
    else
        echo "‚ùå $desc - —Ñ–∞–π–ª $file –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
done

echo ""
echo "üéâ –î–ï–ü–õ–û–ô –ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ù–£!"
echo "================================"
echo ""
echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"
echo "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose -f docker-compose.production.yml up -d"
echo "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: curl http://your-server/health"
echo "4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
echo "5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –±—ç–∫–∞–ø—ã"
echo ""
echo "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:"
echo "- API: http://your-server/api/docs"
echo "- Health: http://your-server/health"
echo "- Metrics: http://your-server/health/metrics"
echo ""
echo "üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:"
echo "- –í—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∑–∞—â–∏—â–µ–Ω—ã"
echo "- Rate limiting –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
echo "- –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞"
echo "- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ"
echo ""
echo "‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:"
echo "- Redis –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ"
echo "- Compression –≤–∫–ª—é—á–µ–Ω"
echo "- Health checks –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
echo ""
echo "üöÄ –ì–æ—Ç–æ–≤–æ –∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é!"
EOF

chmod +x scripts/production-deploy.sh

echo "‚úÖ Production deploy —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: scripts/production-deploy.sh"