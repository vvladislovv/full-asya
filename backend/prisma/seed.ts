import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

  // –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  await prisma.practiceProgress.deleteMany();
  await prisma.testResult.deleteMany();
  await prisma.consultation.deleteMany();
  await prisma.practice.deleteMany();
  await prisma.test.deleteMany();
  await prisma.userStats.deleteMany();
  await prisma.testSession.deleteMany();
  await prisma.user.deleteMany();
  await prisma.systemSettings.deleteMany();

  console.log('üóëÔ∏è  –û—á–∏—â–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ');

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const users = await Promise.all([
    prisma.user.create({
      data: {
        telegramId: '123456789',
        username: 'test_user1',
        firstName: '–ò–≤–∞–Ω',
        lastName: '–ü–µ—Ç—Ä–æ–≤',
        language: 'ru',
        dementiaRiskLevel: 'low',
        hasCompletedDiagnostic: true,
        dementiaQuestionnaire: {
          score: 5,
          answers: {
            memory: 'good',
            concentration: 'excellent',
            sleep: 'normal'
          }
        }
      }
    }),
    prisma.user.create({
      data: {
        telegramId: '987654321',
        username: 'test_user2',
        firstName: '–ú–∞—Ä–∏—è',
        lastName: '–ò–≤–∞–Ω–æ–≤–∞',
        language: 'ru',
        dementiaRiskLevel: 'medium',
        hasCompletedDiagnostic: true,
        dementiaQuestionnaire: {
          score: 12,
          answers: {
            memory: 'sometimes_problems',
            concentration: 'good',
            sleep: 'poor'
          }
        }
      }
    }),
    prisma.user.create({
      data: {
        telegramId: '555666777',
        username: 'john_doe',
        firstName: 'John',
        lastName: 'Doe',
        language: 'en',
        dementiaRiskLevel: 'low',
        hasCompletedDiagnostic: false
      }
    })
  ]);

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
  const tests = await Promise.all([
    prisma.test.create({
      data: {
        type: 'VISUAL_MEMORY',
        name: '–í–∏–∑—É–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å',
        description: '–¢–µ—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
        instruction: '–í–∞–º –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ó–∞–ø–æ–º–Ω–∏—Ç–µ –∏—Ö –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.',
        difficulty: 'medium',
        orderIndex: 1,
        configuration: {
          questionCount: 10,
          timeLimit: 300,
          scoringMethod: 'accuracy'
        }
      }
    }),
    prisma.test.create({
      data: {
        type: 'VERBAL_MEMORY',
        name: '–í–µ—Ä–±–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å',
        description: '–¢–µ—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å —Å–ª–æ–≤–µ—Å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
        instruction: '–í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤. –ó–∞–ø–æ–º–Ω–∏—Ç–µ –∏—Ö –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ.',
        difficulty: 'easy',
        orderIndex: 2,
        configuration: {
          questionCount: 8,
          timeLimit: 240,
          scoringMethod: 'recall'
        }
      }
    }),
    prisma.test.create({
      data: {
        type: 'AUDITORY_MEMORY',
        name: '–†–µ—á–µ-—Å–ª—É—Ö–æ–≤–∞—è –ø–∞–º—è—Ç—å',
        description: '–¢–µ—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å —Å–ª—É—Ö–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
        instruction: '–í–∞–º –±—É–¥—É—Ç –æ–∑–≤—É—á–µ–Ω—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ü–∏—Ñ—Ä –∏ —Å–ª–æ–≤. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∏—Ö.',
        difficulty: 'medium',
        orderIndex: 3,
        configuration: {
          questionCount: 6,
          timeLimit: 180,
          scoringMethod: 'sequence'
        }
      }
    }),
    prisma.test.create({
      data: {
        type: 'DIGIT_SPAN',
        name: '–û–±—ä—ë–º —Ü–∏—Ñ—Ä',
        description: '–¢–µ—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ–±—ä–µ–º–∞ –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏ –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
        instruction: '–í–∞–º –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ü–∏—Ñ—Ä. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∏—Ö –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.',
        difficulty: 'hard',
        orderIndex: 4,
        configuration: {
          questionCount: 5,
          timeLimit: 150,
          scoringMethod: 'adaptive',
          startLength: 3,
          maxLength: 9
        }
      }
    }),
    prisma.test.create({
      data: {
        type: 'VISUAL_ATTENTION',
        name: '–ó—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å –∏ –≤–Ω–∏–º–∞–Ω–∏–µ',
        description: '–¢–µ—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç–∏–º—É–ª–∞—Ö',
        instruction: '–ù–∞–π–¥–∏—Ç–µ –∏ –æ—Ç–º–µ—Ç—å—Ç–µ —Ü–µ–ª–µ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã —Å—Ä–µ–¥–∏ –æ—Ç–≤–ª–µ–∫–∞—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.',
        difficulty: 'medium',
        orderIndex: 5,
        configuration: {
          questionCount: 12,
          timeLimit: 360,
          scoringMethod: 'speed_accuracy'
        }
      }
    }),
    prisma.test.create({
      data: {
        type: 'STROOP_TEST',
        name: '–¢–µ—Å—Ç –°—Ç—Ä—É–ø–∞',
        description: '–¢–µ—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç—Ä–æ–ª—é –∏ —Ç–æ—Ä–º–æ–∂–µ–Ω–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∞–∫—Ü–∏–π',
        instruction: '–ù–∞–∑–æ–≤–∏—Ç–µ —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞, –∞ –Ω–µ —Ç–æ, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–æ.',
        difficulty: 'hard',
        orderIndex: 6,
        configuration: {
          questionCount: 20,
          timeLimit: 120,
          scoringMethod: 'interference'
        }
      }
    }),
    prisma.test.create({
      data: {
        type: 'ARITHMETIC',
        name: '–°—á—ë—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏',
        description: '–¢–µ—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º –≤ —É–º–µ',
        instruction: '–†–µ—à–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –≤ —É–º–µ.',
        difficulty: 'medium',
        orderIndex: 7,
        configuration: {
          questionCount: 15,
          timeLimit: 300,
          scoringMethod: 'accuracy_speed'
        }
      }
    }),
    prisma.test.create({
      data: {
        type: 'SYMBOL_MEMORY',
        name: '–°–∏–º–≤–æ–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å',
        description: '–¢–µ—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏',
        instruction: '–ó–∞–ø–æ–º–Ω–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ü–∏—Ñ—Ä, –∑–∞—Ç–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ü–∏—Ñ—Ä—ã.',
        difficulty: 'hard',
        orderIndex: 8,
        configuration: {
          questionCount: 8,
          timeLimit: 240,
          scoringMethod: 'coding'
        }
      }
    })
  ]);

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${tests.length} —Ç–µ—Å—Ç–æ–≤`);

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const testResults = [];
  for (const user of users.slice(0, 2)) { // –¢–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (let i = 0; i < 3; i++) { // –ü–æ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
      const test = tests[i];
      const score = Math.floor(Math.random() * 80) + 20; // –û—Ü–µ–Ω–∫–∞ –æ—Ç 20 –¥–æ 100
      const percentage = score;
      
      let resultLevel: 'high' | 'medium' | 'low' = 'medium';
      if (percentage >= 80) resultLevel = 'high';
      else if (percentage < 60) resultLevel = 'low';

      const result = await prisma.testResult.create({
        data: {
          userId: user.id,
          testId: test.id,
          testType: test.type,
          score: score,
          maxScore: 100,
          percentage: percentage,
          resultLevel: resultLevel,
          isCompleted: true,
          completedAt: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000), // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
          details: {
            answers: Array.from({ length: 5 }, (_, i) => ({
              questionId: `q_${i + 1}`,
              answer: `answer_${i + 1}`,
              correct: Math.random() > 0.3,
              timeSpent: Math.floor(Math.random() * 30) + 10
            }))
          },
          emotionalState: {
            mood: ['excellent', 'good', 'neutral'][Math.floor(Math.random() * 3)],
            energy: ['high', 'medium', 'low'][Math.floor(Math.random() * 3)],
            stress: ['none', 'low', 'medium'][Math.floor(Math.random() * 3)],
            focus: ['excellent', 'good', 'fair'][Math.floor(Math.random() * 3)],
            motivation: ['high', 'medium', 'low'][Math.floor(Math.random() * 3)]
          }
        }
      });
      testResults.push(result);
    }
  }

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${testResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤`);

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫
  const practices = await Promise.all([
    prisma.practice.create({
      data: {
        name: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–∞–º—è—Ç–∏',
        description: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏',
        category: 'memory',
        difficulty: 'easy',
        orderIndex: 1,
        exercises: [
          {
            id: 'memory_1',
            name: '–ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π',
            description: '–ó–∞–ø–æ–º–Ω–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ 5-7 —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
            type: 'sequence',
            difficulty: 'easy'
          },
          {
            id: 'memory_2',
            name: '–ê—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å',
            description: '–°–æ–∑–¥–∞–π—Ç–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏ —Å–ª–æ–≤',
            type: 'association',
            difficulty: 'medium'
          }
        ]
      }
    }),
    prisma.practice.create({
      data: {
        name: '–†–∞–∑–≤–∏—Ç–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è',
        description: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è',
        category: 'attention',
        difficulty: 'medium',
        orderIndex: 2,
        exercises: [
          {
            id: 'attention_1',
            name: '–ü–æ–∏—Å–∫ —Ä–∞–∑–ª–∏—á–∏–π',
            description: '–ù–∞–π–¥–∏—Ç–µ –æ—Ç–ª–∏—á–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏',
            type: 'visual_search',
            difficulty: 'easy'
          },
          {
            id: 'attention_2',
            name: '–ú–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç—å',
            description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ',
            type: 'multitask',
            difficulty: 'hard'
          }
        ]
      }
    }),
    prisma.practice.create({
      data: {
        name: '–õ–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ',
        description: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –ª–æ–≥–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è',
        category: 'logic',
        difficulty: 'hard',
        orderIndex: 3,
        exercises: [
          {
            id: 'logic_1',
            name: '–õ–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
            description: '–ù–∞–π–¥–∏—Ç–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
            type: 'pattern',
            difficulty: 'medium'
          },
          {
            id: 'logic_2',
            name: '–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á',
            description: '–†–µ—à–∏—Ç–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏',
            type: 'problem_solving',
            difficulty: 'hard'
          }
        ]
      }
    })
  ]);

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${practices.length} –ø—Ä–∞–∫—Ç–∏–∫`);

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–∞–∫—Ç–∏–∫
  for (const user of users.slice(0, 2)) {
    for (const practice of practices.slice(0, 2)) {
      const exercises = practice.exercises as any[];
      for (const exercise of exercises) {
        await prisma.practiceProgress.create({
          data: {
            userId: user.id,
            practiceId: practice.id,
            exerciseId: exercise.id,
            score: Math.floor(Math.random() * 90) + 10,
            completed: Math.random() > 0.3,
            timeSpent: Math.floor(Math.random() * 300) + 60,
            completedAt: Math.random() > 0.3 ? new Date() : null
          }
        });
      }
    }
  }

  console.log('‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∞–∫—Ç–∏–∫');

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
  const consultations = await Promise.all([
    prisma.consultation.create({
      data: {
        userId: users[0].id,
        type: 'online',
        status: 'confirmed',
        scheduledAt: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000), // –ß–µ—Ä–µ–∑ 2 –¥–Ω—è
        notes: '–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        meetingLink: 'https://meet.google.com/abc-defg-hij'
      }
    }),
    prisma.consultation.create({
      data: {
        userId: users[1].id,
        type: 'offline',
        status: 'pending',
        scheduledAt: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000), // –ß–µ—Ä–µ–∑ 5 –¥–Ω–µ–π
        notes: '–ü–µ—Ä–≤–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
        location: '–ö–ª–∏–Ω–∏–∫–∞ –Ω–∞ –ü—É—à–∫–∏–Ω—Å–∫–æ–π 15'
      }
    })
  ]);

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${consultations.length} –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π`);

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  for (const user of users) {
    const userTestResults = await prisma.testResult.findMany({
      where: { userId: user.id, isCompleted: true }
    });

    if (userTestResults.length > 0) {
      const totalScore = userTestResults.reduce((sum, result) => sum + result.score, 0);
      const averageScore = totalScore / userTestResults.length;
      const bestScore = Math.max(...userTestResults.map(r => r.score));
      const totalTimeSpent = userTestResults.length * 300; // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è

      await prisma.userStats.create({
        data: {
          userId: user.id,
          totalTestsCompleted: userTestResults.length,
          averageScore: averageScore,
          bestScore: bestScore,
          totalTimeSpent: totalTimeSpent,
          streakDays: Math.floor(Math.random() * 10) + 1,
          lastActivityDate: new Date()
        }
      });
    }
  }

  console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  await Promise.all([
    prisma.systemSettings.create({
      data: {
        key: 'maintenance_mode',
        value: { enabled: false, message: '–°–∏—Å—Ç–µ–º–∞ –≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏' }
      }
    }),
    prisma.systemSettings.create({
      data: {
        key: 'test_settings',
        value: {
          defaultTimeLimit: 300,
          maxRetries: 3,
          passScore: 60
        }
      }
    }),
    prisma.systemSettings.create({
      data: {
        key: 'notification_settings',
        value: {
          enableEmailNotifications: true,
          enablePushNotifications: true,
          reminderIntervalDays: 7
        }
      }
    })
  ]);

  console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');

  console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!');
  console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
  console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
  console.log(`üß† –¢–µ—Å—Ç–æ–≤: ${tests.length}`);
  console.log(`üìã –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤: ${testResults.length}`);
  console.log(`üí™ –ü—Ä–∞–∫—Ç–∏–∫: ${practices.length}`);
  console.log(`üìÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: ${consultations.length}`);
}

main()
  .catch((e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });