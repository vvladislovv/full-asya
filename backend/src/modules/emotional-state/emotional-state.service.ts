import { Injectable, NotFoundException } from '@nestjs/common';
import { Language } from '@prisma/client';
import { PrismaService } from '../../prisma/prisma.service';
import {
    CreateEmotionalAssessmentDto,
    EmotionalAssessmentResultDto,
    EmotionalResponseDto
} from './dto';

@Injectable()
export class EmotionalStateService {
  constructor(private prisma: PrismaService) {}
  async getEmotionalStateQuestions(language: Language = Language.ru): Promise<any> {
    const questions = {
      [Language.ru]: [
        {
          id: 'es_1',
          type: 'mood',
          question: '–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–π—á–∞—Å?',
          options: [
            { value: 'excellent', label: '–û—Ç–ª–∏—á–Ω–æ', emoji: 'üòä', score: 5 },
            { value: 'good', label: '–•–æ—Ä–æ—à–æ', emoji: 'üôÇ', score: 4 },
            { value: 'neutral', label: '–ù–æ—Ä–º–∞–ª—å–Ω–æ', emoji: 'üòê', score: 3 },
            { value: 'bad', label: '–ü–ª–æ—Ö–æ', emoji: 'üòî', score: 2 },
            { value: 'terrible', label: '–û—á–µ–Ω—å –ø–ª–æ—Ö–æ', emoji: 'üò¢', score: 1 },
          ],
        },
        {
          id: 'es_2',
          type: 'energy',
          question: '–ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏?',
          options: [
            { value: 'high', label: '–í—ã—Å–æ–∫–∏–π', emoji: '‚ö°', score: 5 },
            { value: 'medium', label: '–°—Ä–µ–¥–Ω–∏–π', emoji: 'üîã', score: 3 },
            { value: 'low', label: '–ù–∏–∑–∫–∏–π', emoji: 'üò¥', score: 1 },
          ],
        },
        {
          id: 'es_3',
          type: 'stress',
          question: '–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã —Å–µ–π—á–∞—Å –Ω–∞–ø—Ä—è–∂–µ–Ω—ã?',
          options: [
            { value: 'none', label: '–ù–µ –Ω–∞–ø—Ä—è–∂–µ–Ω', emoji: 'üòå', score: 5 },
            { value: 'low', label: '–°–ª–µ–≥–∫–∞ –Ω–∞–ø—Ä—è–∂–µ–Ω', emoji: 'üòê', score: 4 },
            { value: 'medium', label: '–£–º–µ—Ä–µ–Ω–Ω–æ –Ω–∞–ø—Ä—è–∂–µ–Ω', emoji: 'üò∞', score: 2 },
            { value: 'high', label: '–°–∏–ª—å–Ω–æ –Ω–∞–ø—Ä—è–∂–µ–Ω', emoji: 'üò±', score: 1 },
          ],
        },
        {
          id: 'es_4',
          type: 'focus',
          question: '–ù–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è?',
          options: [
            { value: 'excellent', label: '–û—Ç–ª–∏—á–Ω–æ', emoji: 'üéØ', score: 5 },
            { value: 'good', label: '–•–æ—Ä–æ—à–æ', emoji: 'üëÅÔ∏è', score: 4 },
            { value: 'fair', label: '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ', emoji: 'üëÄ', score: 3 },
            { value: 'poor', label: '–ü–ª–æ—Ö–æ', emoji: 'üòµ', score: 1 },
          ],
        },
        {
          id: 'es_5',
          type: 'motivation',
          question: '–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è?',
          options: [
            { value: 'high', label: '–í—ã—Å–æ–∫–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è', emoji: 'üöÄ', score: 5 },
            { value: 'medium', label: '–°—Ä–µ–¥–Ω—è—è –º–æ—Ç–∏–≤–∞—Ü–∏—è', emoji: 'üí™', score: 4 },
            { value: 'low', label: '–ù–∏–∑–∫–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è', emoji: 'üòï', score: 2 },
            { value: 'none', label: '–ù–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏', emoji: 'üòû', score: 1 },
          ],
        },
        {
          id: 'es_6',
          type: 'anxiety',
          question: '–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –ª–∏ –≤—ã —Ç—Ä–µ–≤–æ–≥—É?',
          options: [
            { value: 'none', label: '–°–æ–≤—Å–µ–º –Ω–µ—Ç', emoji: 'üòä', score: 5 },
            { value: 'slight', label: '–ù–µ–º–Ω–æ–≥–æ', emoji: 'üòê', score: 4 },
            { value: 'moderate', label: '–£–º–µ—Ä–µ–Ω–Ω–æ', emoji: 'üòü', score: 2 },
            { value: 'high', label: '–°–∏–ª—å–Ω–æ', emoji: 'üò∞', score: 1 },
          ],
        },
        {
          id: 'es_7',
          type: 'confidence',
          question: '–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–≤–æ–∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è—Ö?',
          options: [
            { value: 'very_confident', label: '–û—á–µ–Ω—å —É–≤–µ—Ä–µ–Ω', emoji: 'üí™', score: 5 },
            { value: 'confident', label: '–£–≤–µ—Ä–µ–Ω', emoji: 'üëç', score: 4 },
            { value: 'neutral', label: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ', emoji: 'ü§∑', score: 3 },
            { value: 'unsure', label: '–ù–µ —É–≤–µ—Ä–µ–Ω', emoji: 'üòï', score: 2 },
            { value: 'very_unsure', label: '–û—á–µ–Ω—å –Ω–µ —É–≤–µ—Ä–µ–Ω', emoji: 'üò∞', score: 1 },
          ],
        },
      ],
      [Language.en]: [
        {
          id: 'es_1',
          type: 'mood',
          question: 'How are you feeling right now?',
          options: [
            { value: 'excellent', label: 'Excellent', emoji: 'üòä', score: 5 },
            { value: 'good', label: 'Good', emoji: 'üôÇ', score: 4 },
            { value: 'neutral', label: 'Neutral', emoji: 'üòê', score: 3 },
            { value: 'bad', label: 'Bad', emoji: 'üòî', score: 2 },
            { value: 'terrible', label: 'Terrible', emoji: 'üò¢', score: 1 },
          ],
        },
        {
          id: 'es_2',
          type: 'energy',
          question: 'What is your energy level?',
          options: [
            { value: 'high', label: 'High', emoji: '‚ö°', score: 5 },
            { value: 'medium', label: 'Medium', emoji: 'üîã', score: 3 },
            { value: 'low', label: 'Low', emoji: 'üò¥', score: 1 },
          ],
        },
        {
          id: 'es_3',
          type: 'stress',
          question: 'How stressed are you right now?',
          options: [
            { value: 'none', label: 'Not stressed', emoji: 'üòå', score: 5 },
            { value: 'low', label: 'Slightly stressed', emoji: 'üòê', score: 4 },
            { value: 'medium', label: 'Moderately stressed', emoji: 'üò∞', score: 2 },
            { value: 'high', label: 'Very stressed', emoji: 'üò±', score: 1 },
          ],
        },
        {
          id: 'es_4',
          type: 'focus',
          question: 'How well can you concentrate?',
          options: [
            { value: 'excellent', label: 'Excellent', emoji: 'üéØ', score: 5 },
            { value: 'good', label: 'Good', emoji: 'üëÅÔ∏è', score: 4 },
            { value: 'fair', label: 'Fair', emoji: 'üëÄ', score: 3 },
            { value: 'poor', label: 'Poor', emoji: 'üòµ', score: 1 },
          ],
        },
        {
          id: 'es_5',
          type: 'motivation',
          question: 'How motivated are you to perform tasks?',
          options: [
            { value: 'high', label: 'High motivation', emoji: 'üöÄ', score: 5 },
            { value: 'medium', label: 'Medium motivation', emoji: 'üí™', score: 4 },
            { value: 'low', label: 'Low motivation', emoji: 'üòï', score: 2 },
            { value: 'none', label: 'No motivation', emoji: 'üòû', score: 1 },
          ],
        },
        {
          id: 'es_6',
          type: 'anxiety',
          question: 'Do you feel anxious?',
          options: [
            { value: 'none', label: 'Not at all', emoji: 'üòä', score: 5 },
            { value: 'slight', label: 'A little', emoji: 'üòê', score: 4 },
            { value: 'moderate', label: 'Moderately', emoji: 'üòü', score: 2 },
            { value: 'high', label: 'Very much', emoji: 'üò∞', score: 1 },
          ],
        },
        {
          id: 'es_7',
          type: 'confidence',
          question: 'How confident are you in your abilities?',
          options: [
            { value: 'very_confident', label: 'Very confident', emoji: 'üí™', score: 5 },
            { value: 'confident', label: 'Confident', emoji: 'üëç', score: 4 },
            { value: 'neutral', label: 'Neutral', emoji: 'ü§∑', score: 3 },
            { value: 'unsure', label: 'Unsure', emoji: 'üòï', score: 2 },
            { value: 'very_unsure', label: 'Very unsure', emoji: 'üò∞', score: 1 },
          ],
        },
      ]
    };

    return {
      questions: questions[language] || questions[Language.ru],
      totalQuestions: questions[language]?.length || 0,
      language
    };
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
  async createAssessment(dto: CreateEmotionalAssessmentDto): Promise<EmotionalAssessmentResultDto> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await this.prisma.user.findUnique({
        where: { id: dto.userId }
      });

      if (!user) {
        throw new NotFoundException(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${dto.userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω testResultId, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
      if (dto.testResultId) {
        const testResult = await this.prisma.testResult.findUnique({
          where: { id: dto.testResultId }
        });

        if (!testResult) {
          throw new NotFoundException(`–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —Å ID ${dto.testResultId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (testResult.userId !== dto.userId) {
          throw new NotFoundException('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
        }
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫–∏
      const analysis = this.analyzeEmotionalResponses(dto.responses, dto.language || Language.ru);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const assessment = await this.prisma.emotionalAssessment.create({
        data: {
          userId: dto.userId,
          testResultId: dto.testResultId,
          responses: dto.responses as any,
          emotionalScore: analysis.overallScore,
          emotionalState: analysis.emotionalState,
          recommendations: analysis.recommendations
        }
      });

      return this.mapToResultDto(assessment, analysis.detailedScores);
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw error;
      }
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async findByUserId(userId: string): Promise<EmotionalAssessmentResultDto[]> {
    const assessments = await this.prisma.emotionalAssessment.findMany({
      where: { userId },
      orderBy: { createdAt: 'desc' }
    });

    return assessments.map(assessment => this.mapToResultDto(assessment));
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
  async findByTestResultId(testResultId: string): Promise<EmotionalAssessmentResultDto[]> {
    const assessments = await this.prisma.emotionalAssessment.findMany({
      where: { testResultId },
      orderBy: { createdAt: 'desc' }
    });

    return assessments.map(assessment => this.mapToResultDto(assessment));
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –ø–æ ID
  async findOne(id: string): Promise<EmotionalAssessmentResultDto> {
    const assessment = await this.prisma.emotionalAssessment.findUnique({
      where: { id }
    });

    if (!assessment) {
      throw new NotFoundException(`–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }

    return this.mapToResultDto(assessment);
  }

  // –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  async analyzeEmotionalState(answers: Record<string, any>, language: Language = Language.ru): Promise<any> {
    const responses: EmotionalResponseDto[] = Object.entries(answers).map(([questionId, response]) => ({
      questionId,
      response
    }));

    return this.analyzeEmotionalResponses(responses, language);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
  async getStats(userId?: string): Promise<any> {
    const where = userId ? { userId } : {};

    const [
      totalAssessments,
      averageScore,
      recentAssessments,
      scoreDistribution
    ] = await Promise.all([
      this.prisma.emotionalAssessment.count({ where }),
      this.prisma.emotionalAssessment.aggregate({
        where,
        _avg: { emotionalScore: true }
      }),
      this.prisma.emotionalAssessment.count({
        where: {
          ...where,
          createdAt: {
            gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
          }
        }
      }),
      this.prisma.emotionalAssessment.findMany({
        where,
        select: { emotionalScore: true, emotionalState: true },
        orderBy: { createdAt: 'desc' },
        take: 100
      })
    ]);

    const stateDistribution = scoreDistribution.reduce((acc, item) => {
      acc[item.emotionalState] = (acc[item.emotionalState] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    return {
      totalAssessments,
      averageScore: averageScore._avg.emotionalScore || 0,
      recentAssessments,
      stateDistribution,
      trend: this.calculateTrend(scoreDistribution.map(s => s.emotionalScore))
    };
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  private analyzeEmotionalResponses(responses: EmotionalResponseDto[], language: Language): any {
    const detailedScores: Record<string, number> = {};
    let totalScore = 0;
    let maxPossibleScore = 0;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–∞—Ö –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
    const questionsData = this.getQuestionsData(language);

    for (const response of responses) {
      const questionData = questionsData.find(q => q.id === response.questionId);
      if (questionData) {
        const option = questionData.options.find(opt => opt.value === response.response);
        const score = option?.score || response.score || 3; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞
        detailedScores[questionData.type] = score;
        totalScore += score;
        maxPossibleScore += 5; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –∑–∞ –≤–æ–ø—Ä–æ—Å
      }
    }

    const overallScore = Math.round((totalScore / maxPossibleScore) * 100);
    const emotionalState = this.determineEmotionalState(overallScore);
    const recommendations = this.generateRecommendations(detailedScores, language);

    return {
      detailedScores,
      overallScore,
      emotionalState,
      recommendations,
      totalScore,
      maxPossibleScore
    };
  }

  private getQuestionsData(language: Language): any[] {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–ø—Ä–æ—Å–∞—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
    const questions = {
      [Language.ru]: [
        {
          id: 'es_1', type: 'mood',
          options: [
            { value: 'excellent', score: 5 },
            { value: 'good', score: 4 },
            { value: 'neutral', score: 3 },
            { value: 'bad', score: 2 },
            { value: 'terrible', score: 1 }
          ]
        },
        {
          id: 'es_2', type: 'energy',
          options: [
            { value: 'high', score: 5 },
            { value: 'medium', score: 3 },
            { value: 'low', score: 1 }
          ]
        },
        {
          id: 'es_3', type: 'stress',
          options: [
            { value: 'none', score: 5 },
            { value: 'low', score: 4 },
            { value: 'medium', score: 2 },
            { value: 'high', score: 1 }
          ]
        },
        {
          id: 'es_4', type: 'focus',
          options: [
            { value: 'excellent', score: 5 },
            { value: 'good', score: 4 },
            { value: 'fair', score: 3 },
            { value: 'poor', score: 1 }
          ]
        },
        {
          id: 'es_5', type: 'motivation',
          options: [
            { value: 'high', score: 5 },
            { value: 'medium', score: 4 },
            { value: 'low', score: 2 },
            { value: 'none', score: 1 }
          ]
        },
        {
          id: 'es_6', type: 'anxiety',
          options: [
            { value: 'none', score: 5 },
            { value: 'slight', score: 4 },
            { value: 'moderate', score: 2 },
            { value: 'high', score: 1 }
          ]
        },
        {
          id: 'es_7', type: 'confidence',
          options: [
            { value: 'very_confident', score: 5 },
            { value: 'confident', score: 4 },
            { value: 'neutral', score: 3 },
            { value: 'unsure', score: 2 },
            { value: 'very_unsure', score: 1 }
          ]
        }
      ]
    };

    return questions[language] || questions[Language.ru];
  }

  private determineEmotionalState(overallScore: number): string {
    if (overallScore >= 80) return 'excellent';
    if (overallScore >= 65) return 'good';
    if (overallScore >= 50) return 'fair';
    if (overallScore >= 35) return 'poor';
    return 'critical';
  }

  private generateRecommendations(scores: Record<string, number>, language: Language): Record<string, any> {
    const recommendations = {
      [Language.ru]: {
        mood: {
          low: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω—è—Ç—å—Å—è –ø—Ä–∏—è—Ç–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏ –∏–ª–∏ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –±–ª–∏–∑–∫–∏–º–∏',
          tips: ['–ü—Ä–æ–≥—É–ª—è–π—Ç–µ—Å—å –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ', '–ü–æ—Å–ª—É—à–∞–π—Ç–µ –ª—é–±–∏–º—É—é –º—É–∑—ã–∫—É', '–ó–∞–π–º–∏—Ç–µ—Å—å —Ö–æ–±–±–∏']
        },
        energy: {
          low: '–û—Ç–¥–æ—Ö–Ω–∏—Ç–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–∏–ª—ã',
          tips: ['–í—ã—Å–ø–∏—Ç–µ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ', '–°–¥–µ–ª–∞–π—Ç–µ –ª–µ–≥–∫—É—é —Ä–∞–∑–º–∏–Ω–∫—É', '–í—ã–ø–µ–π—Ç–µ –≤–æ–¥—ã']
        },
        stress: {
          high: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–∞',
          tips: ['–î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è', '–ú–µ–¥–∏—Ç–∞—Ü–∏—è', '–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –º—ã—à–µ—á–Ω–∞—è —Ä–µ–ª–∞–∫—Å–∞—Ü–∏—è']
        },
        focus: {
          low: '–°–æ–∑–¥–∞–π—Ç–µ —Å–ø–æ–∫–æ–π–Ω—É—é –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É –¥–ª—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏',
          tips: ['–£–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã', '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É –ü–æ–º–æ–¥–æ—Ä–æ', '–ù–∞–π–¥–∏—Ç–µ —Ç–∏—Ö–æ–µ –º–µ—Å—Ç–æ']
        },
        motivation: {
          low: '–ù–∞–π–¥–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏',
          tips: ['–ü–æ—Å—Ç–∞–≤—å—Ç–µ –º–∞–ª–µ–Ω—å–∫–∏–µ –¥–æ—Å—Ç–∏–∂–∏–º—ã–µ —Ü–µ–ª–∏', '–í–æ–∑–Ω–∞–≥—Ä–∞–¥–∏—Ç–µ —Å–µ–±—è –∑–∞ —É—Å–ø–µ—Ö–∏', '–í—Å–ø–æ–º–Ω–∏—Ç–µ —Å–≤–æ–∏ —Ü–µ–ª–∏']
        },
        anxiety: {
          high: '–†–∞–±–æ—Ç–∞–π—Ç–µ —Å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å—é',
          tips: ['–¢–µ—Ö–Ω–∏–∫–∏ –∑–∞–∑–µ–º–ª–µ–Ω–∏—è', '–î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è', '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π']
        },
        confidence: {
          low: '–£–∫—Ä–µ–ø–ª—è–π—Ç–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ',
          tips: ['–í—Å–ø–æ–º–Ω–∏—Ç–µ —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è', '–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏', '–ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ']
        }
      },
      [Language.en]: {
        mood: {
          low: 'Try engaging in pleasant activities or talking to loved ones',
          tips: ['Take a walk outdoors', 'Listen to your favorite music', 'Engage in hobbies']
        },
        energy: {
          low: 'Rest and restore your energy',
          tips: ['Get enough sleep', 'Do light exercise', 'Drink water']
        },
        stress: {
          high: 'Use relaxation techniques to reduce stress',
          tips: ['Breathing exercises', 'Meditation', 'Progressive muscle relaxation']
        },
        focus: {
          low: 'Create a calm environment for concentration',
          tips: ['Remove distractions', 'Use Pomodoro technique', 'Find a quiet place']
        },
        motivation: {
          low: 'Find sources of motivation',
          tips: ['Set small achievable goals', 'Reward yourself for success', 'Remember your goals']
        },
        anxiety: {
          high: 'Work with anxiety',
          tips: ['Grounding techniques', 'Breathing exercises', 'Seek support']
        },
        confidence: {
          low: 'Build self-confidence',
          tips: ['Remember your achievements', 'Practice positive affirmations', 'Start small']
        }
      }
    };

    const langRecommendations = recommendations[language] || recommendations[Language.ru];
    const result: Record<string, any> = {};

    Object.entries(scores).forEach(([type, score]) => {
      if (score <= 2 && langRecommendations[type]) {
        result[type] = langRecommendations[type];
      }
    });

    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const overallScore = Object.values(scores).reduce((sum, score) => sum + score, 0) / Object.keys(scores).length;
    
    if (overallScore >= 4) {
      result.general = language === Language.ru 
        ? '–û—Ç–ª–∏—á–Ω–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.'
        : 'Excellent emotional state! Keep it up.';
    } else if (overallScore <= 2) {
      result.general = language === Language.ru
        ? '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.'
        : 'Consider seeking professional support.';
    }

    return result;
  }

  private calculateTrend(scores: number[]): string {
    if (scores.length < 2) return 'insufficient_data';
    
    const recent = scores.slice(0, Math.min(5, scores.length));
    const older = scores.slice(Math.min(5, scores.length), Math.min(10, scores.length));
    
    if (older.length === 0) return 'insufficient_data';
    
    const recentAvg = recent.reduce((sum, score) => sum + score, 0) / recent.length;
    const olderAvg = older.reduce((sum, score) => sum + score, 0) / older.length;
    
    const diff = recentAvg - olderAvg;
    
    if (diff > 5) return 'improving';
    if (diff < -5) return 'declining';
    return 'stable';
  }

  private mapToResultDto(assessment: any, detailedScores?: Record<string, number>): EmotionalAssessmentResultDto {
    return {
      id: assessment.id,
      userId: assessment.userId,
      testResultId: assessment.testResultId,
      emotionalScore: assessment.emotionalScore,
      emotionalState: assessment.emotionalState,
      detailedScores: detailedScores || this.extractDetailedScores(assessment.responses),
      recommendations: assessment.recommendations as Record<string, any>,
      responses: assessment.responses as Record<string, any>,
      createdAt: assessment.createdAt
    };
  }

  private extractDetailedScores(responses: any): Record<string, number> {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    if (!responses || !Array.isArray(responses)) return {};
    
    const scores: Record<string, number> = {};
    const questionsData = this.getQuestionsData(Language.ru);
    
    for (const response of responses) {
      const questionData = questionsData.find(q => q.id === response.questionId);
      if (questionData) {
        const option = questionData.options.find(opt => opt.value === response.response);
        scores[questionData.type] = option?.score || 3;
      }
    }
    
    return scores;
  }
} 