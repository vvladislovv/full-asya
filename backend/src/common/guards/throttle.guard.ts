import { ExecutionContext, Injectable } from '@nestjs/common';
import { ThrottlerException, ThrottlerGuard } from '@nestjs/throttler';
import { Request } from 'express';

@Injectable()
export class CustomThrottlerGuard extends ThrottlerGuard {
  protected async throwThrottlingException(context: ExecutionContext): Promise<void> {
    const request = context.switchToHttp().getRequest<Request>();
    const ip = this.getClientIP(request);
    const userAgent = request.headers['user-agent'] || 'unknown';
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
    console.warn(`üö® Rate limit exceeded for IP: ${ip}, User-Agent: ${userAgent}`);
    
    throw new ThrottlerException('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }

  protected async getTracker(req: Request): Promise<string> {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º IP –∞–¥—Ä–µ—Å + User-Agent –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ç—Ä–µ–∫–∏–Ω–≥–∞
    const ip = this.getClientIP(req);
    const userAgent = req.headers['user-agent'] || '';
    const userId = (req as any).user?.id;
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ ID
    if (userId) {
      return `user:${userId}`;
    }
    
    // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º IP + –ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã User-Agent
    const shortUserAgent = userAgent.substring(0, 50);
    return `${ip}:${Buffer.from(shortUserAgent).toString('base64').substring(0, 10)}`;
  }

  private getClientIP(req: Request): string {
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π IP –∫–ª–∏–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–∫—Å–∏
    return (
      req.headers['cf-connecting-ip'] ||
      req.headers['x-real-ip'] ||
      req.headers['x-forwarded-for']?.toString().split(',')[0] ||
      req.socket.remoteAddress ||
      'unknown'
    ) as string;
  }

  protected async shouldSkip(context: ExecutionContext): Promise<boolean> {
    const request = context.switchToHttp().getRequest<Request>();
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è health check endpoints
    if (request.url?.includes('/health') || request.url?.includes('/metrics')) {
      return true;
    }
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const ip = this.getClientIP(request);
    if (['127.0.0.1', '::1', 'localhost'].includes(ip)) {
      return true;
    }
    
    return false;
  }
}