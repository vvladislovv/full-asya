#!/usr/bin/env node
/**
 * –¢–µ—Å—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Auth API endpoints
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node test-auth-api.js
 */

const https = require('http');

const BASE_URL = 'http://localhost:3000';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
    green: '\x1b[32m',
    red: '\x1b[31m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    reset: '\x1b[0m',
    bold: '\x1b[1m'
};

function log(color, message) {
    console.log(`${color}${message}${colors.reset}`);
}

function makeRequest(method, path, headers = {}, data = null) {
    return new Promise((resolve, reject) => {
        const url = new URL(`${BASE_URL}${path}`);
        const options = {
            hostname: url.hostname,
            port: url.port,
            path: url.pathname,
            method: method,
            headers: {
                'Content-Type': 'application/json',
                ...headers
            }
        };

        const req = https.request(options, (res) => {
            let responseData = '';
            
            res.on('data', (chunk) => {
                responseData += chunk;
            });
            
            res.on('end', () => {
                try {
                    const parsedData = responseData ? JSON.parse(responseData) : null;
                    resolve({
                        statusCode: res.statusCode,
                        data: parsedData,
                        raw: responseData
                    });
                } catch (error) {
                    resolve({
                        statusCode: res.statusCode,
                        data: null,
                        raw: responseData,
                        error: 'Invalid JSON response'
                    });
                }
            });
        });

        req.on('error', (error) => {
            reject(error);
        });

        if (data) {
            req.write(JSON.stringify(data));
        }
        
        req.end();
    });
}

async function testLogin() {
    log(colors.blue + colors.bold, '\nüîê –¢–µ—Å—Ç–∏—Ä—É–µ–º POST /api/auth/login');
    
    try {
        const response = await makeRequest('POST', '/api/auth/login', {}, {
            telegramId: '123456789'
        });
        
        if (response.statusCode === 200 || response.statusCode === 201) {
            log(colors.green, '‚úÖ Login —É—Å–ø–µ—à–µ–Ω');
            log(colors.green, `üìç Status: ${response.statusCode}`);
            
            if (response.data && response.data.access_token) {
                log(colors.green, '‚úÖ –ü–æ–ª—É—á–µ–Ω access_token');
                log(colors.green, `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${response.data.user.username} (${response.data.user.firstName} ${response.data.user.lastName})`);
                return response.data.access_token;
            } else {
                log(colors.red, '‚ùå access_token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ');
                return null;
            }
        } else {
            log(colors.red, `‚ùå Login –Ω–µ—É—Å–ø–µ—à–µ–Ω. Status: ${response.statusCode}`);
            log(colors.red, `üìÑ Response: ${response.raw}`);
            return null;
        }
    } catch (error) {
        log(colors.red, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ: ${error.message}`);
        return null;
    }
}

async function testProfile(accessToken) {
    log(colors.blue + colors.bold, '\nüë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/auth/profile');
    
    try {
        const response = await makeRequest('GET', '/api/auth/profile', {
            'Authorization': `Bearer ${accessToken}`
        });
        
        if (response.statusCode === 200) {
            log(colors.green, '‚úÖ Profile –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            log(colors.green, `üìç Status: ${response.statusCode}`);
            
            if (response.data && response.data.id) {
                log(colors.green, `‚úÖ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${response.data.id}`);
                log(colors.green, `üì± Telegram ID: ${response.data.telegramId}`);
                log(colors.green, `üë§ –ò–º—è: ${response.data.firstName} ${response.data.lastName}`);
                log(colors.green, `üåê –Ø–∑—ã–∫: ${response.data.language}`);
                return true;
            } else {
                log(colors.red, '‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
                return false;
            }
        } else {
            log(colors.red, `‚ùå Profile –ø–æ–ª—É—á–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å. Status: ${response.statusCode}`);
            log(colors.red, `üìÑ Response: ${response.raw}`);
            return false;
        }
    } catch (error) {
        log(colors.red, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ profile: ${error.message}`);
        return false;
    }
}

async function testInvalidToken() {
    log(colors.blue + colors.bold, '\nüö´ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/auth/profile —Å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º');
    
    try {
        const response = await makeRequest('GET', '/api/auth/profile', {
            'Authorization': 'Bearer invalid_token_12345'
        });
        
        if (response.statusCode === 401) {
            log(colors.green, '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω');
            log(colors.green, `üìç Status: ${response.statusCode} (Unauthorized)`);
            return true;
        } else {
            log(colors.red, `‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π status code: ${response.statusCode}`);
            log(colors.red, `üìÑ Response: ${response.raw}`);
            return false;
        }
    } catch (error) {
        log(colors.red, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞: ${error.message}`);
        return false;
    }
}

async function testHealth() {
    log(colors.blue + colors.bold, '\nüè• –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/health');
    
    try {
        const response = await makeRequest('GET', '/api/health');
        
        if (response.statusCode === 200) {
            log(colors.green, '‚úÖ Health check –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ');
            log(colors.green, `üìç Status: ${response.statusCode}`);
            return true;
        } else {
            log(colors.red, `‚ùå Health check –Ω–µ—É—Å–ø–µ—à–µ–Ω. Status: ${response.statusCode}`);
            return false;
        }
    } catch (error) {
        log(colors.red, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ health check: ${error.message}`);
        return false;
    }
}

async function runTests() {
    log(colors.yellow + colors.bold, 'üß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã Auth API...');
    log(colors.yellow, `üåê Base URL: ${BASE_URL}`);
    
    let passed = 0;
    let failed = 0;
    
    // Test 1: Health Check
    const healthResult = await testHealth();
    healthResult ? passed++ : failed++;
    
    // Test 2: Login
    const accessToken = await testLogin();
    accessToken ? passed++ : failed++;
    
    if (accessToken) {
        // Test 3: Profile with valid token
        const profileResult = await testProfile(accessToken);
        profileResult ? passed++ : failed++;
        
        // Test 4: Profile with invalid token
        const invalidTokenResult = await testInvalidToken();
        invalidTokenResult ? passed++ : failed++;
    } else {
        failed += 2; // Profile tests failed because login failed
    }
    
    // Results
    log(colors.yellow + colors.bold, '\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    log(colors.green, `‚úÖ –£—Å–ø–µ—à–Ω–æ: ${passed}`);
    log(colors.red, `‚ùå –ù–µ—É–¥–∞—á–Ω–æ: ${failed}`);
    
    if (failed === 0) {
        log(colors.green + colors.bold, '\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
        process.exit(0);
    } else {
        log(colors.red + colors.bold, '\nüí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.');
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests().catch(error => {
    log(colors.red, `üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    process.exit(1);
});
