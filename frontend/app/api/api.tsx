import { API_URL } from "@/settings";

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function ensureAuthenticated(): Promise<string | null> {
    let access_token = localStorage.getItem('access_token');
    
    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
    if (!access_token) {
        console.log('üîë –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
        try {
            const response = await fetch(`${API_URL}/auth/login`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ telegramId: '123456789' })
            });
            
            if (response.ok) {
                const data = await response.json();
                access_token = data.access_token;
                localStorage.setItem('access_token', access_token);
                console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        }
    }
    
    return access_token;
}

export async function apiFetch<T>(
    endpoint: string,
    options?: RequestInit
): Promise<T> {
    const access_token = await ensureAuthenticated();
    
    const res = await fetch(`${API_URL}${endpoint}`, {
        ...options,
        headers: {
            ...(access_token && { "Authorization": `Bearer ${access_token}` }),
            "Content-Type": "application/json",
            ...(options?.headers || {})
        },
    });
    
    // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 401, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –æ–¥–∏–Ω —Ä–∞–∑
    if (res.status === 401 && access_token) {
        console.log('üîÑ –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
        localStorage.removeItem('access_token');
        const newToken = await ensureAuthenticated();
        
        if (newToken) {
            const retryRes = await fetch(`${API_URL}${endpoint}`, {
                ...options,
                headers: {
                    "Authorization": `Bearer ${newToken}`,
                    "Content-Type": "application/json",
                    ...(options?.headers || {})
                },
            });
            
            if (!retryRes.ok) {
                const errorText = await retryRes.text();
                throw new Error(`API ERROR: ${retryRes.status}: ${errorText}`)
            }
            return retryRes.json() as Promise<T>;
        }
    }
    
    if (!res.ok) {
        const errorText = await res.text();
        throw new Error(`API ERROR: ${res.status}: ${errorText}`)
    }
    return res.json() as Promise<T>;
}