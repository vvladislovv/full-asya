import { Test } from "@/app/dto/test";
import { apiFetch } from "../api";

// –¢–∏–ø—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export interface UserStatsResponse {
    totalTests: number;
    completedTests: number;
    averageScore: number;
    lastTestDate: string | null;
    riskLevel: 'low' | 'medium' | 'high' | null;
}

// –¢–∏–ø—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤
export interface TestHistoryItem {
    id: string;
    createdAt: string;
    completedAt?: string;
    testType: string;
    test?: {
        name: string;
        type: string;
        maxScore?: number;
    };
    score: number;
    maxScore?: number;
    percentage?: number;
    isCompleted: boolean;
    resultLevel?: 'low' | 'medium' | 'high';
}

export async function getTests() : Promise<Test[]> {
    try {
        const response = await apiFetch<Test[] | Record<string, Test>>("/tests", {
            method: 'GET'
        });
        
        // Backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ –º–∞—Å—Å–∏–≤, –ø–æ—ç—Ç–æ–º—É –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º
        if (response && typeof response === 'object' && !Array.isArray(response)) {
            const testsArray = Object.values(response);
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ç–µ—Å—Ç—ã —Å backend (–æ–±—ä–µ–∫—Ç):', testsArray.length);
            return testsArray;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –º–∞—Å—Å–∏–≤
        if (Array.isArray(response)) {
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ç–µ—Å—Ç—ã —Å backend (–º–∞—Å—Å–∏–≤):', response.length);
            return response;
        }
        
        console.warn('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç backend:', response);
        return [];
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤ —Å backend:', error);
        throw error;
    }
}
export async function getTestByType(type: string) : Promise<Test> {
    return await apiFetch<Test>(`/tests/type/${type}`, {
        method: 'GET'
    })
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getUserHistory(params?: { limit?: number; offset?: number }): Promise<TestHistoryItem[]> {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å backend
        const query = new URLSearchParams();
        if (params?.limit) query.append('limit', params.limit.toString());
        if (params?.offset) query.append('offset', params.offset.toString());
        
        const response = await apiFetch<TestHistoryItem[]>(`/history?${query.toString()}`, {
            method: 'GET'
        });
        
        console.log('üìã –ò—Å—Ç–æ—Ä–∏—è —Å backend:', response);
        
        if (Array.isArray(response) && response.length > 0) {
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ', response.length, '—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –ë–î');
            return response;
        }
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å backend, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', error);
    }
    
    // –ï—Å–ª–∏ backend –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ
    if (typeof window !== 'undefined') {
        const localResults = JSON.parse(localStorage.getItem('test_results') || '[]');
        const { limit = 50, offset = 0 } = params || {};
        console.log('üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', localResults.length, '—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
        return localResults.slice(offset, offset + limit);
    }
    
    return [];
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getUserStats(): Promise<UserStatsResponse> {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å backend - –∏—Å–ø–æ–ª—å–∑—É–µ–º query parameter period=all –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        const response = await apiFetch<any>('/history/stats?period=all', {
            method: 'GET'
        });
        
        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å backend:', response);
        
        if (response) {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            const stats: UserStatsResponse = {
                totalTests: 8, // –í—Å–µ–≥–¥–∞ 8 —Ç–µ—Å—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ
                completedTests: response.totalTests || response.completedTests || 0,
                averageScore: Math.round(response.averageScore || 0),
                lastTestDate: response.lastTestDate,
                riskLevel: response.riskLevel || 'low'
            };
            
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å backend:', stats);
            return stats;
        }
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å backend, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', error);
        console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
    }
    
    // –ï—Å–ª–∏ backend –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ
    if (typeof window !== 'undefined') {
        const localResults = JSON.parse(localStorage.getItem('test_results') || '[]');
        const completedTests = localResults.filter((r: any) => r.isCompleted);
        const totalTests = completedTests.length;
        
        if (totalTests > 0) {
            // –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ–µ –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
            const totalPercentage = completedTests.reduce((sum: number, r: any) => sum + (r.percentage || 0), 0);
            const averageScore = Math.round(totalPercentage / totalTests);
            
            const lastTestDate = completedTests[0].completedAt;
            
            console.log('üìä –õ–æ–∫–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', {
                totalTests: 8,
                completedTests: totalTests,
                averageScore,
                lastTestDate,
                totalPercentage
            });
            
            return {
                totalTests: 8, // –í—Å–µ–≥–æ 8 —Ç–µ—Å—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ
                completedTests: totalTests,
                averageScore,
                lastTestDate,
                riskLevel: 'low'
            };
        }
    }
    
    return {
        totalTests: 8, // –í—Å–µ–≥–æ 8 —Ç–µ—Å—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ
        completedTests: 0,
        averageScore: 0,
        lastTestDate: null,
        riskLevel: 'low'
    };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ —Ç–∏–ø—É —Ç–µ—Å—Ç–∞
export async function getTestTypeHistory(testType: string) {
    return await apiFetch(`/history/test-type/${testType}`, {
        method: 'GET'
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Ç–µ—Å—Ç—É
export async function getTestProgress(testType: string, days: number = 30) {
    return await apiFetch(`/history/progress/${testType}?days=${days}`, {
        method: 'GET'
    });
}

// –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç
export async function startTest(testId: string) {
    try {
        console.log('üéØ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —Å ID:', testId);
        const result = await apiFetch('/tests/start', {
            method: 'POST',
            body: JSON.stringify({ testId })
        });
        console.log('‚úÖ –¢–µ—Å—Ç –Ω–∞—á–∞—Ç, –ø–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
        return result;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞:', error);
        // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ fallback
        const fallbackResult = {
            id: `local_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            userId: 'local_user',
            testId: testId,
            isCompleted: false,
            createdAt: new Date().toISOString()
        };
        console.log('üì± –°–æ–∑–¥–∞–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', fallbackResult);
        return fallbackResult;
    }
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
export async function submitTestResult(data: {
    resultId: string;
    answers: Record<string, any>;
    timeSpent: number;
    maxScore?: number;
    emotionalState?: Record<string, any>;
    testType?: string;
}) {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞:', data);
    
    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏ scores
    const correctAnswers = data.answers.correct || 0;
    const totalAnswers = data.answers.total || data.maxScore || 1;
    const percentage = Math.round((correctAnswers / totalAnswers) * 100);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    let resultLevel: 'high' | 'medium' | 'low' = 'medium';
    if (percentage >= 75) resultLevel = 'high';
    else if (percentage >= 50) resultLevel = 'medium';
    else resultLevel = 'low';

    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ backend –°–ù–ê–ß–ê–õ–ê
    try {
        const backendResult = await apiFetch('/tests/submit', {
            method: 'POST',
            body: JSON.stringify({
                ...data,
                answers: {
                    ...data.answers,
                    correct: correctAnswers,
                    total: totalAnswers
                }
            })
        });
        
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ backend:', backendResult);
        
        // –ï—Å–ª–∏ backend —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        if (typeof window !== 'undefined') {
            const localResults = JSON.parse(localStorage.getItem('test_results') || '[]');
            
            const newResult = {
                id: data.resultId,
                createdAt: new Date().toISOString(),
                completedAt: new Date().toISOString(),
                testType: data.testType || 'UNKNOWN',
                score: correctAnswers,
                maxScore: totalAnswers,
                percentage: percentage,
                isCompleted: true,
                resultLevel: resultLevel,
                timeSpent: data.timeSpent,
                details: data.answers
            };
            
            localResults.unshift(newResult);
            localStorage.setItem('test_results', JSON.stringify(localResults));
            console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ:', newResult);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            updateLocalStats();
        }
        
        return backendResult;
    } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ backend, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ:', error);
        
        // –í–°–ï–ì–î–ê —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏
        if (typeof window !== 'undefined') {
            const localResults = JSON.parse(localStorage.getItem('test_results') || '[]');
            
            const newResult = {
                id: data.resultId,
                createdAt: new Date().toISOString(),
                completedAt: new Date().toISOString(),
                testType: data.testType || 'UNKNOWN',
                score: correctAnswers,
                maxScore: totalAnswers,
                percentage: percentage,
                isCompleted: true,
                resultLevel: resultLevel,
                timeSpent: data.timeSpent,
                details: data.answers
            };
            
            localResults.unshift(newResult);
            localStorage.setItem('test_results', JSON.stringify(localResults));
            console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ (fallback):', newResult);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            updateLocalStats();
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return { id: data.resultId, success: true, local: true };
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateLocalStats() {
    if (typeof window === 'undefined') return;
    
    try {
        const localResults = JSON.parse(localStorage.getItem('test_results') || '[]');
        const completedTests = localResults.filter((r: any) => r.isCompleted);
        
        if (completedTests.length > 0) {
            const totalScore = completedTests.reduce((sum: number, r: any) => sum + (r.percentage || 0), 0);
            const averageScore = Math.round(totalScore / completedTests.length);
            
            const stats = {
                totalTests: completedTests.length,
                averageScore: averageScore,
                lastTestDate: completedTests[0].completedAt,
                lastUpdate: new Date().toISOString()
            };
            
            localStorage.setItem('user_stats', JSON.stringify(stats));
            console.log('üìä –õ–æ–∫–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', stats);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}