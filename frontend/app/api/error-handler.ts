// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ API
export interface ApiError {
    statusCode: number;
    message: string;
    errorCode?: string;
    timestamp: string;
    path: string;
    method: string;
}

export function handleApiError(error: any): string {
    if (error instanceof Error) {
        // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ API —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        if (error.message.includes('API ERROR:')) {
            try {
                const errorText = error.message.split(': ')[2];
                const errorData: ApiError = JSON.parse(errorText);
                
                switch (errorData.errorCode) {
                    case 'DATABASE_ERROR':
                        return '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
                    case 'AUTH_ERROR':
                        return '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –í–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.';
                    case 'VALIDATION_ERROR':
                        return '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.';
                    case 'NOT_FOUND':
                        return '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
                    default:
                        return errorData.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.';
                }
            } catch (parseError) {
                return '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞.';
            }
        }
        
        // –û–±—ã—á–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏
        if (error.message.includes('Failed to fetch')) {
            return '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.';
        }
        
        if (error.message.includes('Load failed')) {
            return '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.';
        }
        
        return error.message;
    }
    
    return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.';
}

export function logApiError(error: any, context: string = 'API') {
    console.error(`‚ùå ${context} Error:`, error);
    
    if (error instanceof Error && error.message.includes('API ERROR:')) {
        try {
            const errorText = error.message.split(': ')[2];
            const errorData: ApiError = JSON.parse(errorText);
            console.error('üìä Error Details:', {
                statusCode: errorData.statusCode,
                errorCode: errorData.errorCode,
                message: errorData.message,
                path: errorData.path,
                method: errorData.method,
                timestamp: errorData.timestamp
            });
        } catch (parseError) {
            console.error('‚ö†Ô∏è Could not parse error details');
        }
    }
}


