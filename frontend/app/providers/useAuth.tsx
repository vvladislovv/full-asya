"use client";
import { createContext, ReactNode, useContext, useEffect, useState } from 'react';
import { autoLoginTestUser, getCurrentUser, login, loginTelegram } from '../api/services/authService';
import { getTelegramPhotoUrl, getTelegramUser, initTelegramWebApp, isTelegramWebApp } from '../api/services/telegramService';
import type { User } from '../dto/user';

type AuthContextType = {
    user: User | null,
    loading: boolean,
    logout: () => void,
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

// 1. –ü—Ä–æ–≤–∞–π–¥–µ—Ä
export function AuthProvider({children} : {children: ReactNode}) {
    const [user, setUser] = useState<User | null>(null);
    const [loading, setLoading] = useState(true);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Mini App
    useEffect(() => {
        if (isTelegramWebApp()) {
            initTelegramWebApp();
        }
    }, []);
    
    const fetchUser = async () => {
        const access_token = localStorage.getItem('access_token');
        
        if (access_token) {
            try {
                const currentUser = await getCurrentUser(access_token);
                setUser(currentUser);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
                // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ
                await autoLoginTestUser();
                const newToken = localStorage.getItem('access_token');
                if (newToken) {
                    try {
                        const currentUser = await getCurrentUser(newToken);
                        setUser(currentUser);
                    } catch (retryError) {
                        console.error('–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', retryError);
                    }
                }
            }
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram Mini App –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const telegramUser = getTelegramUser();
            
            if (telegramUser) {
                // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
                try {
                    console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Mini App');
                    console.log('üë§ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', telegramUser);
                    
                    // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
                    const telegramPhotoUrl = getTelegramPhotoUrl();
                    
                    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram API
                    const authData = getTelegramAuthData();
                    if (authData) {
                        const loginResult = await loginTelegram(authData.initData);
                        if (loginResult) {
                            localStorage.setItem('access_token', loginResult.access_token);
                            // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                            const enrichedUser = {
                                ...loginResult.user,
                                telegramId: telegramUser.id,
                                firstName: telegramUser.first_name,
                                lastName: telegramUser.last_name,
                                username: telegramUser.username,
                                telegramPhotoUrl: telegramPhotoUrl,
                                photoUrl: loginResult.user.photoUrl || telegramPhotoUrl,
                                language: telegramUser.language_code || 'ru'
                            };
                            setUser(enrichedUser);
                        }
                    } else {
                        // Fallback –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ telegramId
                        const loginResult = await login(telegramUser.id.toString());
                        if (loginResult) {
                            localStorage.setItem('access_token', loginResult.access_token);
                            const enrichedUser = {
                                ...loginResult.user,
                                telegramId: telegramUser.id,
                                firstName: telegramUser.first_name,
                                lastName: telegramUser.last_name,
                                username: telegramUser.username,
                                telegramPhotoUrl: telegramPhotoUrl,
                                photoUrl: loginResult.user.photoUrl || telegramPhotoUrl,
                                language: telegramUser.language_code || 'ru'
                            };
                            setUser(enrichedUser);
                        }
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
                    // Fallback –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await tryTestUserLogin();
                }
            } else {
                // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ Telegram
                await tryTestUserLogin();
            }
        }
        
        async function tryTestUserLogin() {
            try {
                console.log('üß™ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)');
                const loginResult = await autoLoginTestUser();
                if (loginResult) {
                    setUser(loginResult.user);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            }
        }
        
        setLoading(false);
    };
    
    const logout = () => {
        setUser(null);
        localStorage.removeItem('access_token');
    };
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ —Å–µ—Å—Å–∏—é –∏ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç)
    useEffect(() => {
        fetchUser();
    }, []);

    return (
        <AuthContext.Provider value={{user, loading, logout}}>
            {children}
        </AuthContext.Provider>
    );
}

// –•—É–∫ –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export function useAuth() {
    const context = useContext(AuthContext)
    if (!context) {
        throw new Error("useAuth should be used only within the range of AuthProvider")
    }
    return context;
}