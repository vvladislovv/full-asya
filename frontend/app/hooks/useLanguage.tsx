"use client";
import { createContext, ReactNode, useContext, useEffect, useState } from 'react';
import { updateUserLanguage } from '../api/services/authService';
import { useAuth } from '../providers/useAuth';

type Language = 'ru' | 'en';

interface Translations {
  [key: string]: any;
}

interface LanguageContextType {
  language: Language;
  setLanguage: (lang: Language) => void;
  t: (key: string, fallback?: string) => string;
  isLoading: boolean;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export function LanguageProvider({ children }: { children: ReactNode }) {
  const { user } = useAuth();
  const [language, setLanguageState] = useState<Language>('ru');
  const [isLoading, setIsLoading] = useState(false);
  const [translations, setTranslations] = useState<Translations>({});

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
  useEffect(() => {
    const loadTranslations = async () => {
      try {
        const [ruTranslations, enTranslations] = await Promise.all([
          import('../i18n/locales/ru.json'),
          import('../i18n/locales/en.json')
        ]);
        
        setTranslations({
          ru: ruTranslations.default,
          en: enTranslations.default
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:', error);
        // Fallback –Ω–∞ –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
        setTranslations({
          ru: {},
          en: {}
        });
      }
    };

    loadTranslations();
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (user?.language) {
      setLanguageState(user.language as Language);
      console.log(`üåç –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –ë–î: ${user.language}`);
      return;
    }
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ —è–∑—ã–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    setLanguageState('ru'); 
    console.log(`üåç –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ru`);
  }, [user]);

  const setLanguage = async (newLanguage: Language) => {
    if (newLanguage === language) return;
    
    setIsLoading(true);
    try {
      setLanguageState(newLanguage);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      if (user?.id) {
        await updateUserLanguage(user.id, newLanguage);
        console.log(`üåç –Ø–∑—ã–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: ${newLanguage}`);
      }
      
      console.log(`üåç –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${newLanguage}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞:', error);
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setLanguageState(language);
    } finally {
      setIsLoading(false);
    }
  };

  const t = (key: string, fallback?: string): string => {
    if (!translations[language]) {
      return fallback || key;
    }

    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: "profile.title")
    const keys = key.split('.');
    let value = translations[language];
    
    for (const k of keys) {
      if (value && typeof value === 'object' && value[k] !== undefined) {
        value = value[k];
      } else {
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —è–∑—ã–∫
        const otherLang = language === 'ru' ? 'en' : 'ru';
        if (translations[otherLang]) {
          let otherValue = translations[otherLang];
          for (const otherK of keys) {
            if (otherValue && typeof otherValue === 'object' && otherValue[otherK] !== undefined) {
              otherValue = otherValue[otherK];
            } else {
              otherValue = undefined;
              break;
            }
          }
          if (otherValue) {
            return otherValue;
          }
        }
        
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º —è–∑—ã–∫–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –∏–ª–∏ –∫–ª—é—á
        if (fallback) return fallback;
        
        console.warn(`‚ö†Ô∏è –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–ª—é—á–∞: ${key}`);
        return key;
      }
    }
    
    return value;
  };

  return (
    <LanguageContext.Provider value={{ language, setLanguage, t, isLoading }}>
      {children}
    </LanguageContext.Provider>
  );
}

export function useLanguage() {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ LanguageProvider');
  }
  return context;
}