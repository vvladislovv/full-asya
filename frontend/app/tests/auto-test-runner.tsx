"use client";
import { useEffect, useState } from 'react';
import { getTests, startTest, submitTestResult } from '../api/services/testService';
import { useLanguage } from '../hooks/useLanguage';
import { useAuth } from '../providers/useAuth';

interface TestConfig {
    type: string;
    name: string;
    testId: string;
    minScore: number;
    maxScore: number;
}

// –ë—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ ID —Ç–µ—Å—Ç–æ–≤ –∏–∑ API, –∞ –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–∏ –∫–∞–∫ fallback
const AUTO_TESTS: TestConfig[] = [
    { type: 'VISUAL_MEMORY', name: '–í–∏–∑—É–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å', testId: '', minScore: 5, maxScore: 10 },
    { type: 'VERBAL_MEMORY', name: '–í–µ—Ä–±–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å', testId: '', minScore: 4, maxScore: 8 },
    { type: 'AUDITORY_MEMORY', name: '–†–µ—á–µ-—Å–ª—É—Ö–æ–≤–∞—è –ø–∞–º—è—Ç—å', testId: '', minScore: 3, maxScore: 6 },
    { type: 'DIGIT_SPAN', name: '–û–±—ä—ë–º —Ü–∏—Ñ—Ä', testId: '', minScore: 2, maxScore: 5 },
    { type: 'VISUAL_ATTENTION', name: '–ó—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å –∏ –≤–Ω–∏–º–∞–Ω–∏–µ', testId: '', minScore: 7, maxScore: 12 },
    { type: 'STROOP_TEST', name: '–¢–µ—Å—Ç –°—Ç—Ä—É–ø–∞', testId: '', minScore: 10, maxScore: 20 },
    { type: 'ARITHMETIC', name: '–°—á—ë—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏', testId: '', minScore: 8, maxScore: 15 },
    { type: 'SYMBOL_MEMORY', name: '–°–∏–º–≤–æ–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å', testId: '', minScore: 4, maxScore: 8 }
];

interface AutoTestRunnerProps {
    onComplete: () => void;
}

const AutoTestRunner: React.FC<AutoTestRunnerProps> = ({ onComplete }) => {
    const { user } = useAuth();
    const { t } = useLanguage();
    const [currentTestIndex, setCurrentTestIndex] = useState(0);
    const [completedTests, setCompletedTests] = useState<string[]>([]);
    const [isRunning, setIsRunning] = useState(false);
    const [progress, setProgress] = useState(0);
    const [currentTest, setCurrentTest] = useState<TestConfig | null>(null);
    const [log, setLog] = useState<string[]>([]);
    const [testsLoaded, setTestsLoaded] = useState(false);
    const [realTests, setRealTests] = useState<TestConfig[]>(AUTO_TESTS);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏–∑ API –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    useEffect(() => {
        const loadRealTests = async () => {
            try {
                addLog('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –∏–∑ API...');
                const tests = await getTests();
                
                if (tests && tests.length > 0) {
                    const updatedTests = AUTO_TESTS.map(autoTest => {
                        const realTest = tests.find(t => t.type === autoTest.type);
                        return realTest ? { ...autoTest, testId: realTest.id } : null;
                    }).filter(test => test !== null) as TestConfig[];
                    
                    if (updatedTests.length > 0) {
                        setRealTests(updatedTests);
                        addLog(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${updatedTests.length} —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∏–∑ API`);
                    } else {
                        addLog('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã —Å API');
                        setRealTests([]);
                    }
                } else {
                    addLog('‚ö†Ô∏è API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ—Å—Ç—ã, —Ç–µ—Å—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
                    setRealTests([]);
                }
            } catch (error) {
                addLog(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤: ${error}`);
            } finally {
                setTestsLoaded(true);
            }
        };

        if (user) {
            loadRealTests();
        }
    }, [user]);

    const addLog = (message: string) => {
        setLog(prev => [...prev, `${new Date().toLocaleTimeString()}: ${message}`]);
        console.log(`ü§ñ AutoTest: ${message}`);
    };

    const runSingleTest = async (testConfig: TestConfig): Promise<boolean> => {
        try {
            addLog(`–ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç: ${testConfig.name}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π testId
            if (!testConfig.testId) {
                addLog(`‚ùå –£ —Ç–µ—Å—Ç–∞ ${testConfig.name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç testId, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                return false;
            }
            
            // –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç
            const testResult = await startTest(testConfig.testId);
            addLog(`–¢–µ—Å—Ç –Ω–∞—á–∞—Ç —Å ID: ${testResult.id}`);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            const randomScore = Math.floor(Math.random() * (testConfig.maxScore - testConfig.minScore + 1)) + testConfig.minScore;
            const totalQuestions = testConfig.maxScore;
            const percentage = Math.round((randomScore / totalQuestions) * 100);
            
            // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            const timeSpent = Math.floor(Math.random() * 120) + 30; // 30-150 —Å–µ–∫—É–Ω–¥
            
            addLog(`–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${randomScore}/${totalQuestions} (${percentage}%)`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            const submitResult = await submitTestResult({
                resultId: testResult.id,
                answers: {
                    correct: randomScore,
                    total: totalQuestions,
                    details: {
                        autoGenerated: true,
                        timestamp: new Date().toISOString()
                    }
                },
                timeSpent,
                maxScore: totalQuestions,
                emotionalState: {
                    mood: ['excellent', 'good', 'neutral'][Math.floor(Math.random() * 3)]
                }
            });
            
            addLog(`–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${percentage}% –∑–∞ ${timeSpent}—Å`);
            return true;
            
        } catch (error) {
            addLog(`–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ ${testConfig.name}: ${error}`);
            return false;
        }
    };

    const runAllTests = async () => {
        if (!user) {
            addLog('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            return;
        }

        setIsRunning(true);
        addLog('–ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤...');
        
        const completed: string[] = [];
        const testsToRun = testsLoaded && realTests.length > 0 ? realTests : [];
        
        if (testsToRun.length === 0) {
            addLog('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞');
            setIsRunning(false);
            return;
        }
        
        for (let i = 0; i < testsToRun.length; i++) {
            const test = testsToRun[i];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —Ç–µ—Å—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π testId
            if (!test.testId) {
                addLog(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç ${test.name} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç testId`);
                continue;
            }
            
            setCurrentTestIndex(i);
            setCurrentTest(test);
            setProgress(Math.round((i / testsToRun.length) * 100));
            
            const success = await runSingleTest(test);
            
            if (success) {
                completed.push(test.type);
                addLog(`‚úÖ –¢–µ—Å—Ç ${test.name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
            } else {
                addLog(`‚ùå –¢–µ—Å—Ç ${test.name} –ø—Ä–æ–≤–∞–ª–µ–Ω`);
            }
            
            setCompletedTests([...completed]);
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 2000));
        }
        
        setProgress(100);
        setIsRunning(false);
        addLog(`üéâ –ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–æ–π–¥–µ–Ω–æ ${completed.length} –∏–∑ ${testsToRun.length} —Ç–µ—Å—Ç–æ–≤`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if (typeof window !== 'undefined') {
            const event = new CustomEvent('allTestsCompleted', {
                detail: {
                    totalTests: testsToRun.length,
                    completedTests: completed.length,
                    testTypes: completed
                }
            });
            window.dispatchEvent(event);
        }
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            onComplete();
        }, 3000);
    };

    if (!user) {
        return (
            <div className="p-6 text-center">
                <h2 className="text-xl font-semibold mb-4">–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h2>
                <p className="text-red-600">–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</p>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gray-50 p-4">
            <div className="max-w-4xl mx-auto bg-white rounded-lg shadow-lg p-6">
                <h1 className="text-2xl font-bold text-center mb-6">
                    ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {realTests.length > 0 ? `${realTests.length} —Ç–µ—Å—Ç–æ–≤` : '—Ç–µ—Å—Ç–æ–≤'}
                </h1>
                
                <div className="mb-6">
                    <div className="flex justify-between text-sm text-gray-600 mb-2">
                        <span>–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
                        <span>{progress}%</span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-2">
                        <div 
                            className="bg-green-500 h-2 rounded-full transition-all duration-300"
                            style={{ width: `${progress}%` }}
                        ></div>
                    </div>
                </div>

                {currentTest && (
                    <div className="mb-6 p-4 bg-blue-50 rounded-lg">
                        <h3 className="font-semibold text-blue-800">
                            –¢–µ–∫—É—â–∏–π —Ç–µ—Å—Ç: {currentTest.name}
                        </h3>
                        <p className="text-sm text-blue-600">
                            –¢–µ—Å—Ç {currentTestIndex + 1} –∏–∑ {realTests.length}
                        </p>
                    </div>
                )}

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                    {realTests.length > 0 ? realTests.map((test, index) => (
                        <div 
                            key={test.type}
                            className={`p-3 rounded-lg border ${
                                completedTests.includes(test.type) 
                                    ? 'bg-green-50 border-green-200' 
                                    : currentTestIndex === index && isRunning
                                    ? 'bg-yellow-50 border-yellow-200'
                                    : 'bg-gray-50 border-gray-200'
                            }`}
                        >
                            <div className="flex items-center justify-between">
                                <span className="font-medium">{test.name}</span>
                                <span className="text-sm">
                                    {completedTests.includes(test.type) && '‚úÖ'}
                                    {currentTestIndex === index && isRunning && '‚è≥'}
                                </span>
                            </div>
                            <div className="text-xs text-gray-500 mt-1">
                                {test.minScore}-{test.maxScore} –±–∞–ª–ª–æ–≤
                                {test.testId && <span className="ml-2 text-green-600">‚úì API</span>}
                            </div>
                        </div>
                    )) : (
                        <div className="col-span-2 text-center py-8 text-gray-500">
                            {testsLoaded ? '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' : '–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤...'}
                        </div>
                    )}
                </div>

                <div className="text-center mb-6">
                    <button
                        onClick={runAllTests}
                        disabled={isRunning || !testsLoaded || realTests.length === 0}
                        className={`px-8 py-3 rounded-lg font-semibold ${
                            isRunning || !testsLoaded || realTests.length === 0
                                ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                                : 'bg-green-500 text-white hover:bg-green-600'
                        }`}
                    >
                        {isRunning ? '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...' : 
                         !testsLoaded ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : 
                         realTests.length === 0 ? '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤' : 
                         `–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã (${realTests.length})`}
                    </button>
                </div>

                <div className="bg-gray-50 rounded-lg p-4 max-h-60 overflow-y-auto">
                    <h4 className="font-semibold mb-2">–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</h4>
                    {log.length === 0 ? (
                        <p className="text-gray-500 text-sm">–õ–æ–≥–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤</p>
                    ) : (
                        <div className="space-y-1">
                            {log.map((entry, index) => (
                                <div key={index} className="text-xs font-mono text-gray-700">
                                    {entry}
                                </div>
                            ))}
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default AutoTestRunner;
